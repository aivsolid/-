// ------------------------------------------------------------------------------
//  <auto-generated>
//    Generated by Xsd2Code. Version 3.4.0.22408 Microsoft Reciprocal License (Ms-RL) 
//    <NameSpace>Egais.Entities.WB_DOC_SINGLE_01</NameSpace><Collection>List</Collection><codeType>CSharp</codeType><EnableDataBinding>True</EnableDataBinding><EnableLazyLoading>False</EnableLazyLoading><TrackingChangesEnable>False</TrackingChangesEnable><GenTrackingClasses>False</GenTrackingClasses><HidePrivateFieldInIDE>False</HidePrivateFieldInIDE><EnableSummaryComment>False</EnableSummaryComment><VirtualProp>False</VirtualProp><IncludeSerializeMethod>True</IncludeSerializeMethod><UseBaseClass>False</UseBaseClass><GenBaseClass>False</GenBaseClass><GenerateCloneMethod>False</GenerateCloneMethod><GenerateDataContracts>True</GenerateDataContracts><CodeBaseTag>Net35</CodeBaseTag><SerializeMethodName>Serialize</SerializeMethodName><DeserializeMethodName>Deserialize</DeserializeMethodName><SaveToFileMethodName>SaveToFile</SaveToFileMethodName><LoadFromFileMethodName>LoadFromFile</LoadFromFileMethodName><GenerateXMLAttributes>True</GenerateXMLAttributes><OrderXMLAttrib>False</OrderXMLAttrib><EnableEncoding>False</EnableEncoding><AutomaticProperties>False</AutomaticProperties><GenerateShouldSerialize>False</GenerateShouldSerialize><DisableDebug>False</DisableDebug><PropNameSpecified>Default</PropNameSpecified><Encoder>UTF8</Encoder><CustomUsings></CustomUsings><ExcludeIncludedTypes>True</ExcludeIncludedTypes><EnableInitializeFields>True</EnableInitializeFields>
//  </auto-generated>
// ------------------------------------------------------------------------------
namespace Egais.Entities.WB_DOC_SINGLE_01 {
    using System;
    using System.Diagnostics;
    using System.Xml.Serialization;
    using System.Collections;
    using System.Xml.Schema;
    using System.ComponentModel;
    using System.IO;
    using System.Text;
    using System.Collections.Generic;
    using System.Runtime.Serialization;

    using Egais.Entities.EGCommon;
    using Egais.Entities.EGCommonEnum;
    using Egais.Entities.EGCommonV3;
    using Egais.Entities.ProductRef;
    using Egais.Entities.TTNSingle;
    using Egais.Entities.Ticket;
    using Egais.Entities.TTNActSingle;
    using Egais.Entities.ConfirmTicket;
    using Egais.Entities.ActInventorySingle;
    using Egais.Entities.ActChargeOn;
    using Egais.Entities.ActInventoryInformBReg;
    using Egais.Entities.QueryParameters;
    using Egais.Entities.QueryFormAB;
    using Egais.Entities.TTNInformBReg;
    using Egais.Entities.ActWriteOff;
    using Egais.Entities.RepProducedProduct;
    using Egais.Entities.RepImportedProduct;

    using Egais.Entities.ReplySSP;
    using Egais.Entities.ReplySpirit;
    using Egais.Entities.ReplyClient;
    using Egais.Entities.ReplyAP;
    using Egais.Entities.ReplyRests;
    using Egais.Entities.ReplyFormA;
    using Egais.Entities.ReplyFormB;

    using Egais.Entities.ReplyHistFormB;
    using Egais.Entities.ReplyClientVersion;

    using Egais.Entities.ClientRef_v2;
    using Egais.Entities.ProductRef_v2;
    using Egais.Entities.QueryRejectRepProduced;
    using Egais.Entities.QueryRejectRepImported;

    using Egais.Entities.ReplySSP_v2;
    using Egais.Entities.ReplySpirit_v2;
    using Egais.Entities.ReplyClient_v2;
    using Egais.Entities.ReplyAP_v2;
    using Egais.Entities.ReplyRests_v2;
    using Egais.Entities.ReplyForm1;
    using Egais.Entities.ReplyForm2;
    using Egais.Entities.ReplyHistForm2;
    using Egais.Entities.TTNSingle_v2;
    using Egais.Entities.TTNActSingle_v2;
    using Egais.Entities.ActChargeOn_v2;
    using Egais.Entities.ActInventoryInformF2Reg;
    using Egais.Entities.QueryFormF1F2;
    using Egais.Entities.TTNInformF2Reg;
    using Egais.Entities.ActWriteOff_v2;
    using Egais.Entities.TransferFromShop;
    using Egais.Entities.TransferToShop;
    using Egais.Entities.RepInformF1Reg;
    using Egais.Entities.ReplyNoAnswerTTN;
    using Egais.Entities.ReplyRestsShop_v2;
    using Egais.Entities.Asiiu;
    using Egais.Entities.AsiiuTime;

    using Egais.Entities.ActChargeOnShop_v2;
    using Egais.Entities.ActWriteOffShop_v2;
    using Egais.Entities.InfoVersionTTN;
    using Egais.Entities.QueryBarcode;
    using Egais.Entities.ReplyBarcode;
    using Egais.Entities.RequestRepealWB;
    using Egais.Entities.ConfirmRepealWB;
    using Egais.Entities.RequestRepealACO;
    using Egais.Entities.RequestRepealAWO;

    using Egais.Entities.ReplyRests_Mini;
    using Egais.Entities.ReplyRestsShop_Mini;
    using Egais.Entities.RequestAddProducts;
    using Egais.Entities.RequestAddForeignProducer;

    using Egais.Entities.ReplyHistoryShop;
    using Egais.Entities.ReplyWriteOffCheque;
    using Egais.Entities.ASCPNavigation;

    using Egais.Entities.TTNSingle_v3;
    using Egais.Entities.ActWriteOff_v3;
    using Egais.Entities.TTNActSingle_v3;
    using Egais.Entities.RepProducedProduct_v3;
    using Egais.Entities.RepImportedProduct_v3;
    using Egais.Entities.ReplyRestBCode;
    using Egais.Entities.ActFixBarCode;
    using Egais.Entities.ActUnFixBarCode;
    using Egais.Entities.ReplyParentHistForm2;
    using Egais.Entities.TTNHistoryF2Reg;
    using Egais.Entities.CarrierNotice;

    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.4.0.22414")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01", IsNullable=false)]
    [System.Runtime.Serialization.DataContractAttribute(Name="Documents", Namespace="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01")]
    public partial class Documents : System.ComponentModel.INotifyPropertyChanged {
        
        private SenderInfo ownerField;
        
        private DocBody documentField;
        
        private string versionField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        public Documents() {
            this.documentField = new DocBody();
            this.ownerField = new SenderInfo();
            this.versionField = "1.0";
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public SenderInfo Owner {
            get {
                return this.ownerField;
            }
            set {
                if ((this.ownerField != null)) {
                    if ((ownerField.Equals(value) != true)) {
                        this.ownerField = value;
                        this.OnPropertyChanged("Owner");
                    }
                }
                else {
                    this.ownerField = value;
                    this.OnPropertyChanged("Owner");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DocBody Document {
            get {
                return this.documentField;
            }
            set {
                if ((this.documentField != null)) {
                    if ((documentField.Equals(value) != true)) {
                        this.documentField = value;
                        this.OnPropertyChanged("Document");
                    }
                }
                else {
                    this.documentField = value;
                    this.OnPropertyChanged("Document");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute("1.0")]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Version {
            get {
                return this.versionField;
            }
            set {
                if ((this.versionField != null)) {
                    if ((versionField.Equals(value) != true)) {
                        this.versionField = value;
                        this.OnPropertyChanged("Version");
                    }
                }
                else {
                    this.versionField = value;
                    this.OnPropertyChanged("Version");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(Documents));
                }
                return serializer;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current Documents object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an Documents object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output Documents object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out Documents obj, out System.Exception exception) {
            exception = null;
            obj = default(Documents);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out Documents obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static Documents Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((Documents)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current Documents object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an Documents object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output Documents object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Documents obj, out System.Exception exception) {
            exception = null;
            obj = default(Documents);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out Documents obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static Documents LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.4.0.22414")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01", IsNullable=true)]
    [System.Runtime.Serialization.DataContractAttribute(Name="SenderInfo", Namespace="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01")]
    public partial class SenderInfo : System.ComponentModel.INotifyPropertyChanged {
        
        private string fSRAR_IDField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FSRAR_ID {
            get {
                return this.fSRAR_IDField;
            }
            set {
                if ((this.fSRAR_IDField != null)) {
                    if ((fSRAR_IDField.Equals(value) != true)) {
                        this.fSRAR_IDField = value;
                        this.OnPropertyChanged("FSRAR_ID");
                    }
                }
                else {
                    this.fSRAR_IDField = value;
                    this.OnPropertyChanged("FSRAR_ID");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(SenderInfo));
                }
                return serializer;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current SenderInfo object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an SenderInfo object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output SenderInfo object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out SenderInfo obj, out System.Exception exception) {
            exception = null;
            obj = default(SenderInfo);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out SenderInfo obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static SenderInfo Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((SenderInfo)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current SenderInfo object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an SenderInfo object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output SenderInfo object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out SenderInfo obj, out System.Exception exception) {
            exception = null;
            obj = default(SenderInfo);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out SenderInfo obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static SenderInfo LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.4.0.22414")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01", IsNullable=true)]
    [System.Runtime.Serialization.DataContractAttribute(Name="DocBody", Namespace="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01")]
    public partial class DocBody : System.ComponentModel.INotifyPropertyChanged {
        
        private object itemField;
        
        private ItemChoiceType itemElementNameField;        
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        [System.Xml.Serialization.XmlElementAttribute("ActChargeOn", typeof(ActChargeOnType))]
        [System.Xml.Serialization.XmlElementAttribute("ActChargeOnShop_v2", typeof(ActChargeOnShopType_v2))]
        [System.Xml.Serialization.XmlElementAttribute("ActChargeOn_v2", typeof(ActChargeOnType_v2))]
        [System.Xml.Serialization.XmlElementAttribute("ActFixBarCode", typeof(ActFixBarCode))]
        [System.Xml.Serialization.XmlElementAttribute("ActInventory", typeof(ActInventoryType))]
        [System.Xml.Serialization.XmlElementAttribute("ActInventoryInformBReg", typeof(ActInventoryInformBReg))]
        [System.Xml.Serialization.XmlElementAttribute("ActInventoryInformF2Reg", typeof(ActInventoryInformF2Reg))]
        [System.Xml.Serialization.XmlElementAttribute("ActUnFixBarCode", typeof(ActUnFixBarCode))]
        [System.Xml.Serialization.XmlElementAttribute("ActWriteOff", typeof(ActWriteOffType))]
        [System.Xml.Serialization.XmlElementAttribute("ActWriteOffShop_v2", typeof(ActWriteOffShopType_v2))]
        [System.Xml.Serialization.XmlElementAttribute("ActWriteOff_v2", typeof(ActWriteOffType_v2))]
        [System.Xml.Serialization.XmlElementAttribute("ActWriteOff_v3", typeof(ActWriteOffType_v3))]
        [System.Xml.Serialization.XmlElementAttribute("AscpNav", typeof(AscpNav))]
        [System.Xml.Serialization.XmlElementAttribute("Asiiu", typeof(Asiiu))]
        [System.Xml.Serialization.XmlElementAttribute("AsiiuSign", typeof(Asiiu))]
        [System.Xml.Serialization.XmlElementAttribute("AsiiuTime", typeof(AsiiuTime))]
        [System.Xml.Serialization.XmlElementAttribute("AsiiuTimeSign", typeof(AsiiuTime))]
        [System.Xml.Serialization.XmlElementAttribute("CarrierNotice", typeof(CarrierNotice))]
        [System.Xml.Serialization.XmlElementAttribute("ConfirmRepealWB", typeof(ConfirmRepealWB))]
        [System.Xml.Serialization.XmlElementAttribute("ConfirmTicket", typeof(ConfirmTicketType))]
        [System.Xml.Serialization.XmlElementAttribute("InfoVersionTTN", typeof(InfoVersionTTN))]
        [System.Xml.Serialization.XmlElementAttribute("QueryAP", typeof(QueryParameters))]
        [System.Xml.Serialization.XmlElementAttribute("QueryAP_v2", typeof(QueryParameters))]
        [System.Xml.Serialization.XmlElementAttribute("QueryBarcode", typeof(QueryBarcode))]
        [System.Xml.Serialization.XmlElementAttribute("QueryClientVersion", typeof(QueryParameters))]
        [System.Xml.Serialization.XmlElementAttribute("QueryClients", typeof(QueryParameters))]
        [System.Xml.Serialization.XmlElementAttribute("QueryClients_v2", typeof(QueryParameters))]
        [System.Xml.Serialization.XmlElementAttribute("QueryForm2History", typeof(QueryParameters))]
        [System.Xml.Serialization.XmlElementAttribute("QueryFormA", typeof(QueryFormAB))]
        [System.Xml.Serialization.XmlElementAttribute("QueryFormB", typeof(QueryFormAB))]
        [System.Xml.Serialization.XmlElementAttribute("QueryFormBHistory", typeof(QueryParameters))]
        [System.Xml.Serialization.XmlElementAttribute("QueryFormF1", typeof(QueryFormF1F2))]
        [System.Xml.Serialization.XmlElementAttribute("QueryFormF2", typeof(QueryFormF1F2))]
        [System.Xml.Serialization.XmlElementAttribute("QueryHistoryRestShop", typeof(QueryParameters))]
        [System.Xml.Serialization.XmlElementAttribute("QueryNATTN", typeof(QueryParameters))]
        [System.Xml.Serialization.XmlElementAttribute("QueryParentHistForm2", typeof(QueryParameters))]
        [System.Xml.Serialization.XmlElementAttribute("QueryRejectRepImported", typeof(QueryRejectRepImported))]
        [System.Xml.Serialization.XmlElementAttribute("QueryRejectRepProduced", typeof(QueryRejectRepProduced))]
        [System.Xml.Serialization.XmlElementAttribute("QueryResendDoc", typeof(QueryParameters))]
        [System.Xml.Serialization.XmlElementAttribute("QueryRestBCode", typeof(QueryParameters))]
        [System.Xml.Serialization.XmlElementAttribute("QueryRests", typeof(QueryParameters))]
        [System.Xml.Serialization.XmlElementAttribute("QueryRestsShop_Mini", typeof(QueryParameters))]
        [System.Xml.Serialization.XmlElementAttribute("QueryRestsShop_v2", typeof(QueryParameters))]
        [System.Xml.Serialization.XmlElementAttribute("QueryRests_Mini", typeof(QueryParameters))]
        [System.Xml.Serialization.XmlElementAttribute("QueryRests_v2", typeof(QueryParameters))]
        [System.Xml.Serialization.XmlElementAttribute("QuerySP", typeof(QueryParameters))]
        [System.Xml.Serialization.XmlElementAttribute("QuerySP_v2", typeof(QueryParameters))]
        [System.Xml.Serialization.XmlElementAttribute("QuerySSP", typeof(QueryParameters))]
        [System.Xml.Serialization.XmlElementAttribute("QuerySSP_v2", typeof(QueryParameters))]
        [System.Xml.Serialization.XmlElementAttribute("QueryWriteOffCheque", typeof(QueryParameters))]
        [System.Xml.Serialization.XmlElementAttribute("RepImportedProduct", typeof(RepImportedType))]
        [System.Xml.Serialization.XmlElementAttribute("RepImportedProduct_v3", typeof(RepImportedType_v3))]
        [System.Xml.Serialization.XmlElementAttribute("RepInformF1Reg", typeof(RepPIInformF1RegType))]
        [System.Xml.Serialization.XmlElementAttribute("RepProducedProduct", typeof(RepProducedType))]
        [System.Xml.Serialization.XmlElementAttribute("RepProducedProduct_v3", typeof(RepProducedType_v3))]
        [System.Xml.Serialization.XmlElementAttribute("ReplyAP", typeof(ReplyAP))]
        [System.Xml.Serialization.XmlElementAttribute("ReplyAP_v2", typeof(ReplyAP_v2))]
        [System.Xml.Serialization.XmlElementAttribute("ReplyBarcode", typeof(ReplyBarcode))]
        [System.Xml.Serialization.XmlElementAttribute("ReplyClient", typeof(ReplyClient))]
        [System.Xml.Serialization.XmlElementAttribute("ReplyClientVersion", typeof(ReplyClientVersion))]
        [System.Xml.Serialization.XmlElementAttribute("ReplyClient_v2", typeof(ReplyClient_v2))]
        [System.Xml.Serialization.XmlElementAttribute("ReplyForm1", typeof(ReplyForm1))]
        [System.Xml.Serialization.XmlElementAttribute("ReplyForm2", typeof(ReplyForm2))]
        [System.Xml.Serialization.XmlElementAttribute("ReplyFormA", typeof(ReplyFormA))]
        [System.Xml.Serialization.XmlElementAttribute("ReplyFormB", typeof(ReplyFormB))]
        [System.Xml.Serialization.XmlElementAttribute("ReplyHistForm2", typeof(ReplyHistForm2))]
        [System.Xml.Serialization.XmlElementAttribute("ReplyHistFormB", typeof(ReplyHistFormB))]
        [System.Xml.Serialization.XmlElementAttribute("ReplyHistoryShop", typeof(ReplyHistoryTransferShop))]
        [System.Xml.Serialization.XmlElementAttribute("ReplyNoAnswerTTN", typeof(NoAnswerTTN))]
        [System.Xml.Serialization.XmlElementAttribute("ReplyParentHistForm2", typeof(ReplyParentHistForm2))]
        [System.Xml.Serialization.XmlElementAttribute("ReplyRestBCode", typeof(ReplyRestBCode))]
        [System.Xml.Serialization.XmlElementAttribute("ReplyRests", typeof(ReplyRests))]
        [System.Xml.Serialization.XmlElementAttribute("ReplyRestsShop_Mini", typeof(ReplyRestsShop_Mini))]
        [System.Xml.Serialization.XmlElementAttribute("ReplyRestsShop_v2", typeof(ReplyRestsShop_v2))]
        [System.Xml.Serialization.XmlElementAttribute("ReplyRests_Mini", typeof(ReplyRests_Mini))]
        [System.Xml.Serialization.XmlElementAttribute("ReplyRests_v2", typeof(ReplyRests_v2))]
        [System.Xml.Serialization.XmlElementAttribute("ReplySSP", typeof(ReplySSP))]
        [System.Xml.Serialization.XmlElementAttribute("ReplySSP_v2", typeof(ReplySSP_v2))]
        [System.Xml.Serialization.XmlElementAttribute("ReplySpirit", typeof(ReplySpirit))]
        [System.Xml.Serialization.XmlElementAttribute("ReplySpirit_v2", typeof(ReplySpirit_v2))]
        [System.Xml.Serialization.XmlElementAttribute("ReplyWriteOffCheque", typeof(ReplyWOCheque))]
        [System.Xml.Serialization.XmlElementAttribute("RequestAddFProducer", typeof(RequestAddFProducer))]
        [System.Xml.Serialization.XmlElementAttribute("RequestAddProducts", typeof(RequestAddProducts))]
        [System.Xml.Serialization.XmlElementAttribute("RequestRepealACO", typeof(RequestRepealACO))]
        [System.Xml.Serialization.XmlElementAttribute("RequestRepealAWO", typeof(RequestRepealAWO))]
        [System.Xml.Serialization.XmlElementAttribute("RequestRepealWB", typeof(RequestRepealWB))]
        [System.Xml.Serialization.XmlElementAttribute("TTNHistoryF2Reg", typeof(TTNHistoryF2Reg))]
        [System.Xml.Serialization.XmlElementAttribute("TTNInformBReg", typeof(WayBillInformBRegType))]
        [System.Xml.Serialization.XmlElementAttribute("TTNInformF2Reg", typeof(WayBillInformF2RegType))]
        [System.Xml.Serialization.XmlElementAttribute("Ticket", typeof(TicketType))]
        [System.Xml.Serialization.XmlElementAttribute("TransferFromShop", typeof(TransferFromShopType))]
        [System.Xml.Serialization.XmlElementAttribute("TransferToShop", typeof(TransferToShopType))]
        [System.Xml.Serialization.XmlElementAttribute("WayBill", typeof(WayBillType))]
        [System.Xml.Serialization.XmlElementAttribute("WayBillAct", typeof(WayBillActType))]
        [System.Xml.Serialization.XmlElementAttribute("WayBillAct_v2", typeof(WayBillActType_v2))]
        [System.Xml.Serialization.XmlElementAttribute("WayBillAct_v3", typeof(WayBillActType_v3))]
        [System.Xml.Serialization.XmlElementAttribute("WayBill_v2", typeof(WayBillType_v2))]
        [System.Xml.Serialization.XmlElementAttribute("WayBill_v3", typeof(WayBillType_v3))]
        [System.Xml.Serialization.XmlChoiceIdentifierAttribute("ItemElementName")]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public object Item {
            get {
                return this.itemField;
            }
            set {
                if ((this.itemField != null)) {
                    if ((itemField.Equals(value) != true)) {
                        this.itemField = value;
                        this.OnPropertyChanged("Item");
                    }
                }
                else {
                    this.itemField = value;
                    this.OnPropertyChanged("Item");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ItemChoiceType ItemElementName {
            get {
                return this.itemElementNameField;
            }
            set {
                if ((itemElementNameField.Equals(value) != true)) {
                    this.itemElementNameField = value;
                    this.OnPropertyChanged("ItemElementName");
                }
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public string ItemElementNameString
        {
            get
            {
                return this.itemElementNameField.ToString();
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(DocBody));
                }
                return serializer;
            }
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current DocBody object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an DocBody object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output DocBody object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out DocBody obj, out System.Exception exception) {
            exception = null;
            obj = default(DocBody);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out DocBody obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static DocBody Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((DocBody)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current DocBody object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an DocBody object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output DocBody object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out DocBody obj, out System.Exception exception) {
            exception = null;
            obj = default(DocBody);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out DocBody obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static DocBody LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.4.0.22414")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01", IncludeInSchema=false)]
    public enum ItemChoiceType {
        
        /// <remarks/>
        ActChargeOn,
        
        /// <remarks/>
        ActChargeOnShop_v2,
        
        /// <remarks/>
        ActChargeOn_v2,
        
        /// <remarks/>
        ActFixBarCode,
        
        /// <remarks/>
        ActInventory,
        
        /// <remarks/>
        ActInventoryInformBReg,
        
        /// <remarks/>
        ActInventoryInformF2Reg,
        
        /// <remarks/>
        ActUnFixBarCode,
        
        /// <remarks/>
        ActWriteOff,
        
        /// <remarks/>
        ActWriteOffShop_v2,
        
        /// <remarks/>
        ActWriteOff_v2,
        
        /// <remarks/>
        ActWriteOff_v3,
        
        /// <remarks/>
        AscpNav,
        
        /// <remarks/>
        Asiiu,
        
        /// <remarks/>
        AsiiuSign,
        
        /// <remarks/>
        AsiiuTime,
        
        /// <remarks/>
        AsiiuTimeSign,
        
        /// <remarks/>
        CarrierNotice,
        
        /// <remarks/>
        ConfirmRepealWB,
        
        /// <remarks/>
        ConfirmTicket,
        
        /// <remarks/>
        InfoVersionTTN,
        
        /// <remarks/>
        QueryAP,
        
        /// <remarks/>
        QueryAP_v2,
        
        /// <remarks/>
        QueryBarcode,
        
        /// <remarks/>
        QueryClientVersion,
        
        /// <remarks/>
        QueryClients,
        
        /// <remarks/>
        QueryClients_v2,
        
        /// <remarks/>
        QueryForm2History,
        
        /// <remarks/>
        QueryFormA,
        
        /// <remarks/>
        QueryFormB,
        
        /// <remarks/>
        QueryFormBHistory,
        
        /// <remarks/>
        QueryFormF1,
        
        /// <remarks/>
        QueryFormF2,
        
        /// <remarks/>
        QueryHistoryRestShop,
        
        /// <remarks/>
        QueryNATTN,
        
        /// <remarks/>
        QueryParentHistForm2,
        
        /// <remarks/>
        QueryRejectRepImported,
        
        /// <remarks/>
        QueryRejectRepProduced,
        
        /// <remarks/>
        QueryResendDoc,
        
        /// <remarks/>
        QueryRestBCode,
        
        /// <remarks/>
        QueryRests,
        
        /// <remarks/>
        QueryRestsShop_Mini,
        
        /// <remarks/>
        QueryRestsShop_v2,
        
        /// <remarks/>
        QueryRests_Mini,
        
        /// <remarks/>
        QueryRests_v2,
        
        /// <remarks/>
        QuerySP,
        
        /// <remarks/>
        QuerySP_v2,
        
        /// <remarks/>
        QuerySSP,
        
        /// <remarks/>
        QuerySSP_v2,
        
        /// <remarks/>
        QueryWriteOffCheque,
        
        /// <remarks/>
        RepImportedProduct,
        
        /// <remarks/>
        RepImportedProduct_v3,
        
        /// <remarks/>
        RepInformF1Reg,
        
        /// <remarks/>
        RepProducedProduct,
        
        /// <remarks/>
        RepProducedProduct_v3,
        
        /// <remarks/>
        ReplyAP,
        
        /// <remarks/>
        ReplyAP_v2,
        
        /// <remarks/>
        ReplyBarcode,
        
        /// <remarks/>
        ReplyClient,
        
        /// <remarks/>
        ReplyClientVersion,
        
        /// <remarks/>
        ReplyClient_v2,
        
        /// <remarks/>
        ReplyForm1,
        
        /// <remarks/>
        ReplyForm2,
        
        /// <remarks/>
        ReplyFormA,
        
        /// <remarks/>
        ReplyFormB,
        
        /// <remarks/>
        ReplyHistForm2,
        
        /// <remarks/>
        ReplyHistFormB,
        
        /// <remarks/>
        ReplyHistoryShop,
        
        /// <remarks/>
        ReplyNoAnswerTTN,
        
        /// <remarks/>
        ReplyParentHistForm2,
        
        /// <remarks/>
        ReplyRestBCode,
        
        /// <remarks/>
        ReplyRests,
        
        /// <remarks/>
        ReplyRestsShop_Mini,
        
        /// <remarks/>
        ReplyRestsShop_v2,
        
        /// <remarks/>
        ReplyRests_Mini,
        
        /// <remarks/>
        ReplyRests_v2,
        
        /// <remarks/>
        ReplySSP,
        
        /// <remarks/>
        ReplySSP_v2,
        
        /// <remarks/>
        ReplySpirit,
        
        /// <remarks/>
        ReplySpirit_v2,
        
        /// <remarks/>
        ReplyWriteOffCheque,
        
        /// <remarks/>
        RequestAddFProducer,
        
        /// <remarks/>
        RequestAddProducts,
        
        /// <remarks/>
        RequestRepealACO,
        
        /// <remarks/>
        RequestRepealAWO,
        
        /// <remarks/>
        RequestRepealWB,
        
        /// <remarks/>
        TTNHistoryF2Reg,
        
        /// <remarks/>
        TTNInformBReg,
        
        /// <remarks/>
        TTNInformF2Reg,
        
        /// <remarks/>
        Ticket,
        
        /// <remarks/>
        TransferFromShop,
        
        /// <remarks/>
        TransferToShop,
        
        /// <remarks/>
        WayBill,
        
        /// <remarks/>
        WayBillAct,
        
        /// <remarks/>
        WayBillAct_v2,
        
        /// <remarks/>
        WayBillAct_v3,
        
        /// <remarks/>
        WayBill_v2,
        
        /// <remarks/>
        WayBill_v3,
    }
}
