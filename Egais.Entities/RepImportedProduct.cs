// ------------------------------------------------------------------------------
//  <auto-generated>
//    Generated by Xsd2Code. Version 3.4.0.22408 Microsoft Reciprocal License (Ms-RL) 
//    <NameSpace>Egais.Entities.RepImportedProduct</NameSpace><Collection>List</Collection><codeType>CSharp</codeType><EnableDataBinding>True</EnableDataBinding><EnableLazyLoading>False</EnableLazyLoading><TrackingChangesEnable>False</TrackingChangesEnable><GenTrackingClasses>False</GenTrackingClasses><HidePrivateFieldInIDE>False</HidePrivateFieldInIDE><EnableSummaryComment>False</EnableSummaryComment><VirtualProp>False</VirtualProp><IncludeSerializeMethod>True</IncludeSerializeMethod><UseBaseClass>False</UseBaseClass><GenBaseClass>False</GenBaseClass><GenerateCloneMethod>False</GenerateCloneMethod><GenerateDataContracts>True</GenerateDataContracts><CodeBaseTag>Net35</CodeBaseTag><SerializeMethodName>Serialize</SerializeMethodName><DeserializeMethodName>Deserialize</DeserializeMethodName><SaveToFileMethodName>SaveToFile</SaveToFileMethodName><LoadFromFileMethodName>LoadFromFile</LoadFromFileMethodName><GenerateXMLAttributes>True</GenerateXMLAttributes><OrderXMLAttrib>False</OrderXMLAttrib><EnableEncoding>False</EnableEncoding><AutomaticProperties>False</AutomaticProperties><GenerateShouldSerialize>False</GenerateShouldSerialize><DisableDebug>False</DisableDebug><PropNameSpecified>Default</PropNameSpecified><Encoder>UTF8</Encoder><CustomUsings></CustomUsings><ExcludeIncludedTypes>True</ExcludeIncludedTypes><EnableInitializeFields>True</EnableInitializeFields>
//  </auto-generated>
// ------------------------------------------------------------------------------
namespace Egais.Entities.RepImportedProduct {
    using System;
    using System.Diagnostics;
    using System.Xml.Serialization;
    using System.Collections;
    using System.Xml.Schema;
    using System.ComponentModel;
    using System.IO;
    using System.Text;
    using System.Collections.Generic;
    using System.Runtime.Serialization;

    using Egais.Entities.EGCommon;
    using Egais.Entities.ClientRef_v2;
    using Egais.Entities.ProductRef_v2;

    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.4.0.22414")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://fsrar.ru/WEGAIS/RepImportedProduct")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://fsrar.ru/WEGAIS/RepImportedProduct", IsNullable=true)]
    [System.Runtime.Serialization.DataContractAttribute(Name="RepImportedType", Namespace="http://fsrar.ru/WEGAIS/RepImportedProduct")]
    public partial class RepImportedType : System.ComponentModel.INotifyPropertyChanged {
        
        private string identityField;
        
        private RepImportedTypeHeader headerField;
        
        private List<PositionType> contentField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        public RepImportedType() {
            this.contentField = new List<PositionType>();
            this.headerField = new RepImportedTypeHeader();
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Identity {
            get {
                return this.identityField;
            }
            set {
                if ((this.identityField != null)) {
                    if ((identityField.Equals(value) != true)) {
                        this.identityField = value;
                        this.OnPropertyChanged("Identity");
                    }
                }
                else {
                    this.identityField = value;
                    this.OnPropertyChanged("Identity");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public RepImportedTypeHeader Header {
            get {
                return this.headerField;
            }
            set {
                if ((this.headerField != null)) {
                    if ((headerField.Equals(value) != true)) {
                        this.headerField = value;
                        this.OnPropertyChanged("Header");
                    }
                }
                else {
                    this.headerField = value;
                    this.OnPropertyChanged("Header");
                }
            }
        }
        
        [System.Xml.Serialization.XmlArrayItemAttribute("Position", IsNullable=false)]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<PositionType> Content {
            get {
                return this.contentField;
            }
            set {
                if ((this.contentField != null)) {
                    if ((contentField.Equals(value) != true)) {
                        this.contentField = value;
                        this.OnPropertyChanged("Content");
                    }
                }
                else {
                    this.contentField = value;
                    this.OnPropertyChanged("Content");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(RepImportedType));
                }
                return serializer;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current RepImportedType object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an RepImportedType object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output RepImportedType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out RepImportedType obj, out System.Exception exception) {
            exception = null;
            obj = default(RepImportedType);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out RepImportedType obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static RepImportedType Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((RepImportedType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current RepImportedType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an RepImportedType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output RepImportedType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out RepImportedType obj, out System.Exception exception) {
            exception = null;
            obj = default(RepImportedType);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out RepImportedType obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static RepImportedType LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.4.0.22414")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://fsrar.ru/WEGAIS/RepImportedProduct")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RepImportedTypeHeader", Namespace="http://fsrar.ru/WEGAIS/RepImportedProduct")]
    public partial class RepImportedTypeHeader : System.ComponentModel.INotifyPropertyChanged {
        
        private string nUMBERField;
        
        private System.DateTime dateField;
        
        private System.DateTime importedDateField;
        
        private OrgInfoRus_v2 importerField;
        
        private OrgInfoForeign_v2 supplierField;
        
        private string gTDNUMBERField;
        
        private System.DateTime gTDDateField;
        
        private string contractNUMBERField;
        
        private System.DateTime contractDateField;
        
        private string countryField;
        
        private string noteField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        public RepImportedTypeHeader() {
            this.supplierField = new OrgInfoForeign_v2();
            this.importerField = new OrgInfoRus_v2();
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string NUMBER {
            get {
                return this.nUMBERField;
            }
            set {
                if ((this.nUMBERField != null)) {
                    if ((nUMBERField.Equals(value) != true)) {
                        this.nUMBERField = value;
                        this.OnPropertyChanged("NUMBER");
                    }
                }
                else {
                    this.nUMBERField = value;
                    this.OnPropertyChanged("NUMBER");
                }
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(DataType="date")]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime Date {
            get {
                return this.dateField;
            }
            set {
                if ((dateField.Equals(value) != true)) {
                    this.dateField = value;
                    this.OnPropertyChanged("Date");
                }
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(DataType="date")]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime ImportedDate {
            get {
                return this.importedDateField;
            }
            set {
                if ((importedDateField.Equals(value) != true)) {
                    this.importedDateField = value;
                    this.OnPropertyChanged("ImportedDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public OrgInfoRus_v2 Importer {
            get {
                return this.importerField;
            }
            set {
                if ((this.importerField != null)) {
                    if ((importerField.Equals(value) != true)) {
                        this.importerField = value;
                        this.OnPropertyChanged("Importer");
                    }
                }
                else {
                    this.importerField = value;
                    this.OnPropertyChanged("Importer");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public OrgInfoForeign_v2 Supplier {
            get {
                return this.supplierField;
            }
            set {
                if ((this.supplierField != null)) {
                    if ((supplierField.Equals(value) != true)) {
                        this.supplierField = value;
                        this.OnPropertyChanged("Supplier");
                    }
                }
                else {
                    this.supplierField = value;
                    this.OnPropertyChanged("Supplier");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string GTDNUMBER {
            get {
                return this.gTDNUMBERField;
            }
            set {
                if ((this.gTDNUMBERField != null)) {
                    if ((gTDNUMBERField.Equals(value) != true)) {
                        this.gTDNUMBERField = value;
                        this.OnPropertyChanged("GTDNUMBER");
                    }
                }
                else {
                    this.gTDNUMBERField = value;
                    this.OnPropertyChanged("GTDNUMBER");
                }
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(DataType="date")]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime GTDDate {
            get {
                return this.gTDDateField;
            }
            set {
                if ((gTDDateField.Equals(value) != true)) {
                    this.gTDDateField = value;
                    this.OnPropertyChanged("GTDDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ContractNUMBER {
            get {
                return this.contractNUMBERField;
            }
            set {
                if ((this.contractNUMBERField != null)) {
                    if ((contractNUMBERField.Equals(value) != true)) {
                        this.contractNUMBERField = value;
                        this.OnPropertyChanged("ContractNUMBER");
                    }
                }
                else {
                    this.contractNUMBERField = value;
                    this.OnPropertyChanged("ContractNUMBER");
                }
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(DataType="date")]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime ContractDate {
            get {
                return this.contractDateField;
            }
            set {
                if ((contractDateField.Equals(value) != true)) {
                    this.contractDateField = value;
                    this.OnPropertyChanged("ContractDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Country {
            get {
                return this.countryField;
            }
            set {
                if ((this.countryField != null)) {
                    if ((countryField.Equals(value) != true)) {
                        this.countryField = value;
                        this.OnPropertyChanged("Country");
                    }
                }
                else {
                    this.countryField = value;
                    this.OnPropertyChanged("Country");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Note {
            get {
                return this.noteField;
            }
            set {
                if ((this.noteField != null)) {
                    if ((noteField.Equals(value) != true)) {
                        this.noteField = value;
                        this.OnPropertyChanged("Note");
                    }
                }
                else {
                    this.noteField = value;
                    this.OnPropertyChanged("Note");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(RepImportedTypeHeader));
                }
                return serializer;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current RepImportedTypeHeader object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an RepImportedTypeHeader object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output RepImportedTypeHeader object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out RepImportedTypeHeader obj, out System.Exception exception) {
            exception = null;
            obj = default(RepImportedTypeHeader);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out RepImportedTypeHeader obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static RepImportedTypeHeader Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((RepImportedTypeHeader)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current RepImportedTypeHeader object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an RepImportedTypeHeader object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output RepImportedTypeHeader object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out RepImportedTypeHeader obj, out System.Exception exception) {
            exception = null;
            obj = default(RepImportedTypeHeader);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out RepImportedTypeHeader obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static RepImportedTypeHeader LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.4.0.22414")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://fsrar.ru/WEGAIS/RepImportedProduct")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://fsrar.ru/WEGAIS/RepImportedProduct", IsNullable=true)]
    [System.Runtime.Serialization.DataContractAttribute(Name="PositionType", Namespace="http://fsrar.ru/WEGAIS/RepImportedProduct")]
    public partial class PositionType : System.ComponentModel.INotifyPropertyChanged {
        
        private string productCodeField;
        
        private decimal quantityField;
        
        private decimal alcPercentField;
        
        private bool alcPercentFieldSpecified;
        
        private decimal alcPercentMinField;
        
        private bool alcPercentMinFieldSpecified;
        
        private decimal alcPercentMaxField;
        
        private bool alcPercentMaxFieldSpecified;
        
        private string partyField;
        
        private string identityField;
        
        private string comment1Field;
        
        private string comment2Field;
        
        private string comment3Field;
        
        private MarkInfoType markInfoField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ProductCode {
            get {
                return this.productCodeField;
            }
            set {
                if ((this.productCodeField != null)) {
                    if ((productCodeField.Equals(value) != true)) {
                        this.productCodeField = value;
                        this.OnPropertyChanged("ProductCode");
                    }
                }
                else {
                    this.productCodeField = value;
                    this.OnPropertyChanged("ProductCode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal Quantity {
            get {
                return this.quantityField;
            }
            set {
                if ((this.quantityField != null)) {
                    if ((quantityField.Equals(value) != true)) {
                        this.quantityField = value;
                        this.OnPropertyChanged("Quantity");
                    }
                }
                else {
                    this.quantityField = value;
                    this.OnPropertyChanged("Quantity");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal alcPercent {
            get {
                return this.alcPercentField;
            }
            set {
                if ((this.alcPercentField != null)) {
                    if ((alcPercentField.Equals(value) != true)) {
                        this.alcPercentField = value;
                        this.OnPropertyChanged("alcPercent");
                    }
                }
                else {
                    this.alcPercentField = value;
                    this.OnPropertyChanged("alcPercent");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool alcPercentSpecified {
            get {
                return this.alcPercentFieldSpecified;
            }
            set {
                if ((alcPercentFieldSpecified.Equals(value) != true)) {
                    this.alcPercentFieldSpecified = value;
                    this.OnPropertyChanged("alcPercentSpecified");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal alcPercentMin {
            get {
                return this.alcPercentMinField;
            }
            set {
                if ((this.alcPercentMinField != null)) {
                    if ((alcPercentMinField.Equals(value) != true)) {
                        this.alcPercentMinField = value;
                        this.OnPropertyChanged("alcPercentMin");
                    }
                }
                else {
                    this.alcPercentMinField = value;
                    this.OnPropertyChanged("alcPercentMin");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool alcPercentMinSpecified {
            get {
                return this.alcPercentMinFieldSpecified;
            }
            set {
                if ((alcPercentMinFieldSpecified.Equals(value) != true)) {
                    this.alcPercentMinFieldSpecified = value;
                    this.OnPropertyChanged("alcPercentMinSpecified");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal alcPercentMax {
            get {
                return this.alcPercentMaxField;
            }
            set {
                if ((this.alcPercentMaxField != null)) {
                    if ((alcPercentMaxField.Equals(value) != true)) {
                        this.alcPercentMaxField = value;
                        this.OnPropertyChanged("alcPercentMax");
                    }
                }
                else {
                    this.alcPercentMaxField = value;
                    this.OnPropertyChanged("alcPercentMax");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool alcPercentMaxSpecified {
            get {
                return this.alcPercentMaxFieldSpecified;
            }
            set {
                if ((alcPercentMaxFieldSpecified.Equals(value) != true)) {
                    this.alcPercentMaxFieldSpecified = value;
                    this.OnPropertyChanged("alcPercentMaxSpecified");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Party {
            get {
                return this.partyField;
            }
            set {
                if ((this.partyField != null)) {
                    if ((partyField.Equals(value) != true)) {
                        this.partyField = value;
                        this.OnPropertyChanged("Party");
                    }
                }
                else {
                    this.partyField = value;
                    this.OnPropertyChanged("Party");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Identity {
            get {
                return this.identityField;
            }
            set {
                if ((this.identityField != null)) {
                    if ((identityField.Equals(value) != true)) {
                        this.identityField = value;
                        this.OnPropertyChanged("Identity");
                    }
                }
                else {
                    this.identityField = value;
                    this.OnPropertyChanged("Identity");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Comment1 {
            get {
                return this.comment1Field;
            }
            set {
                if ((this.comment1Field != null)) {
                    if ((comment1Field.Equals(value) != true)) {
                        this.comment1Field = value;
                        this.OnPropertyChanged("Comment1");
                    }
                }
                else {
                    this.comment1Field = value;
                    this.OnPropertyChanged("Comment1");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Comment2 {
            get {
                return this.comment2Field;
            }
            set {
                if ((this.comment2Field != null)) {
                    if ((comment2Field.Equals(value) != true)) {
                        this.comment2Field = value;
                        this.OnPropertyChanged("Comment2");
                    }
                }
                else {
                    this.comment2Field = value;
                    this.OnPropertyChanged("Comment2");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Comment3 {
            get {
                return this.comment3Field;
            }
            set {
                if ((this.comment3Field != null)) {
                    if ((comment3Field.Equals(value) != true)) {
                        this.comment3Field = value;
                        this.OnPropertyChanged("Comment3");
                    }
                }
                else {
                    this.comment3Field = value;
                    this.OnPropertyChanged("Comment3");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MarkInfoType MarkInfo {
            get {
                return this.markInfoField;
            }
            set {
                if ((this.markInfoField != null)) {
                    if ((markInfoField.Equals(value) != true)) {
                        this.markInfoField = value;
                        this.OnPropertyChanged("MarkInfo");
                    }
                }
                else {
                    this.markInfoField = value;
                    this.OnPropertyChanged("MarkInfo");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(PositionType));
                }
                return serializer;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current PositionType object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an PositionType object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output PositionType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out PositionType obj, out System.Exception exception) {
            exception = null;
            obj = default(PositionType);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out PositionType obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static PositionType Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((PositionType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current PositionType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an PositionType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output PositionType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out PositionType obj, out System.Exception exception) {
            exception = null;
            obj = default(PositionType);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out PositionType obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static PositionType LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
}
