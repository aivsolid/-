// ------------------------------------------------------------------------------
//  <auto-generated>
//    Generated by Xsd2Code. Version 3.4.0.22408 Microsoft Reciprocal License (Ms-RL) 
//    <NameSpace>Egais.Entities.TTNSingle</NameSpace><Collection>List</Collection><codeType>CSharp</codeType><EnableDataBinding>True</EnableDataBinding><EnableLazyLoading>False</EnableLazyLoading><TrackingChangesEnable>False</TrackingChangesEnable><GenTrackingClasses>False</GenTrackingClasses><HidePrivateFieldInIDE>False</HidePrivateFieldInIDE><EnableSummaryComment>False</EnableSummaryComment><VirtualProp>False</VirtualProp><IncludeSerializeMethod>True</IncludeSerializeMethod><UseBaseClass>False</UseBaseClass><GenBaseClass>False</GenBaseClass><GenerateCloneMethod>False</GenerateCloneMethod><GenerateDataContracts>True</GenerateDataContracts><CodeBaseTag>Net35</CodeBaseTag><SerializeMethodName>Serialize</SerializeMethodName><DeserializeMethodName>Deserialize</DeserializeMethodName><SaveToFileMethodName>SaveToFile</SaveToFileMethodName><LoadFromFileMethodName>LoadFromFile</LoadFromFileMethodName><GenerateXMLAttributes>True</GenerateXMLAttributes><OrderXMLAttrib>False</OrderXMLAttrib><EnableEncoding>False</EnableEncoding><AutomaticProperties>False</AutomaticProperties><GenerateShouldSerialize>False</GenerateShouldSerialize><DisableDebug>False</DisableDebug><PropNameSpecified>Default</PropNameSpecified><Encoder>UTF8</Encoder><CustomUsings></CustomUsings><ExcludeIncludedTypes>True</ExcludeIncludedTypes><EnableInitializeFields>True</EnableInitializeFields>
//  </auto-generated>
// ------------------------------------------------------------------------------
namespace Egais.Entities.TTNSingle {
    using System;
    using System.Diagnostics;
    using System.Xml.Serialization;
    using System.Collections;
    using System.Xml.Schema;
    using System.ComponentModel;
    using System.IO;
    using System.Text;
    using System.Collections.Generic;
    using System.Runtime.Serialization;

    using Egais.Entities.EGCommon;
    using Egais.Entities.ClientRef;
    using Egais.Entities.ProductRef;
    

    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.4.0.22414")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://fsrar.ru/WEGAIS/TTNSingle")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://fsrar.ru/WEGAIS/TTNSingle", IsNullable=true)]
    [System.Runtime.Serialization.DataContractAttribute(Name="WayBillType", Namespace="http://fsrar.ru/WEGAIS/TTNSingle")]
    public partial class WayBillType : System.ComponentModel.INotifyPropertyChanged {
        
        private string identityField;
        
        private WayBillTypeHeader headerField;
        
        private List<PositionType> contentField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        public WayBillType() {
            this.contentField = new List<PositionType>();
            this.headerField = new WayBillTypeHeader();
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Identity {
            get {
                return this.identityField;
            }
            set {
                if ((this.identityField != null)) {
                    if ((identityField.Equals(value) != true)) {
                        this.identityField = value;
                        this.OnPropertyChanged("Identity");
                    }
                }
                else {
                    this.identityField = value;
                    this.OnPropertyChanged("Identity");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public WayBillTypeHeader Header {
            get {
                return this.headerField;
            }
            set {
                if ((this.headerField != null)) {
                    if ((headerField.Equals(value) != true)) {
                        this.headerField = value;
                        this.OnPropertyChanged("Header");
                    }
                }
                else {
                    this.headerField = value;
                    this.OnPropertyChanged("Header");
                }
            }
        }
        
        [System.Xml.Serialization.XmlArrayItemAttribute("Position", IsNullable=false)]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<PositionType> Content {
            get {
                return this.contentField;
            }
            set {
                if ((this.contentField != null)) {
                    if ((contentField.Equals(value) != true)) {
                        this.contentField = value;
                        this.OnPropertyChanged("Content");
                    }
                }
                else {
                    this.contentField = value;
                    this.OnPropertyChanged("Content");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(WayBillType));
                }
                return serializer;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current WayBillType object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an WayBillType object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output WayBillType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out WayBillType obj, out System.Exception exception) {
            exception = null;
            obj = default(WayBillType);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out WayBillType obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static WayBillType Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((WayBillType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current WayBillType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an WayBillType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output WayBillType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out WayBillType obj, out System.Exception exception) {
            exception = null;
            obj = default(WayBillType);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out WayBillType obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static WayBillType LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.4.0.22414")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://fsrar.ru/WEGAIS/TTNSingle")]
    [System.Runtime.Serialization.DataContractAttribute(Name="WayBillTypeHeader", Namespace="http://fsrar.ru/WEGAIS/TTNSingle")]
    public partial class WayBillTypeHeader : System.ComponentModel.INotifyPropertyChanged {
        
        private WbType typeField;
        
        private WbUnitType unitTypeField;
        
        private string nUMBERField;
        
        private System.DateTime dateField;
        
        private System.DateTime shippingDateField;
        
        private TransportType transportField;
        
        private OrgInfo shipperField;
        
        private OrgInfo consigneeField;
        
        private OrgInfo supplierField;
        
        private string baseField;
        
        private string noteField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        public WayBillTypeHeader() {
            this.supplierField = new OrgInfo();
            this.consigneeField = new OrgInfo();
            this.shipperField = new OrgInfo();
            this.transportField = new TransportType();
            this.typeField = WbType.WBInvoiceFromMe;
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public WbType Type {
            get {
                return this.typeField;
            }
            set {
                if ((typeField.Equals(value) != true)) {
                    this.typeField = value;
                    this.OnPropertyChanged("Type");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public WbUnitType UnitType {
            get {
                return this.unitTypeField;
            }
            set {
                if ((unitTypeField.Equals(value) != true)) {
                    this.unitTypeField = value;
                    this.OnPropertyChanged("UnitType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string NUMBER {
            get {
                return this.nUMBERField;
            }
            set {
                if ((this.nUMBERField != null)) {
                    if ((nUMBERField.Equals(value) != true)) {
                        this.nUMBERField = value;
                        this.OnPropertyChanged("NUMBER");
                    }
                }
                else {
                    this.nUMBERField = value;
                    this.OnPropertyChanged("NUMBER");
                }
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(DataType="date")]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime Date {
            get {
                return this.dateField;
            }
            set {
                if ((dateField.Equals(value) != true)) {
                    this.dateField = value;
                    this.OnPropertyChanged("Date");
                }
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(DataType="date")]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime ShippingDate {
            get {
                return this.shippingDateField;
            }
            set {
                if ((shippingDateField.Equals(value) != true)) {
                    this.shippingDateField = value;
                    this.OnPropertyChanged("ShippingDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public TransportType Transport {
            get {
                return this.transportField;
            }
            set {
                if ((this.transportField != null)) {
                    if ((transportField.Equals(value) != true)) {
                        this.transportField = value;
                        this.OnPropertyChanged("Transport");
                    }
                }
                else {
                    this.transportField = value;
                    this.OnPropertyChanged("Transport");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public OrgInfo Shipper {
            get {
                return this.shipperField;
            }
            set {
                if ((this.shipperField != null)) {
                    if ((shipperField.Equals(value) != true)) {
                        this.shipperField = value;
                        this.OnPropertyChanged("Shipper");
                    }
                }
                else {
                    this.shipperField = value;
                    this.OnPropertyChanged("Shipper");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public OrgInfo Consignee {
            get {
                return this.consigneeField;
            }
            set {
                if ((this.consigneeField != null)) {
                    if ((consigneeField.Equals(value) != true)) {
                        this.consigneeField = value;
                        this.OnPropertyChanged("Consignee");
                    }
                }
                else {
                    this.consigneeField = value;
                    this.OnPropertyChanged("Consignee");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public OrgInfo Supplier {
            get {
                return this.supplierField;
            }
            set {
                if ((this.supplierField != null)) {
                    if ((supplierField.Equals(value) != true)) {
                        this.supplierField = value;
                        this.OnPropertyChanged("Supplier");
                    }
                }
                else {
                    this.supplierField = value;
                    this.OnPropertyChanged("Supplier");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Base {
            get {
                return this.baseField;
            }
            set {
                if ((this.baseField != null)) {
                    if ((baseField.Equals(value) != true)) {
                        this.baseField = value;
                        this.OnPropertyChanged("Base");
                    }
                }
                else {
                    this.baseField = value;
                    this.OnPropertyChanged("Base");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Note {
            get {
                return this.noteField;
            }
            set {
                if ((this.noteField != null)) {
                    if ((noteField.Equals(value) != true)) {
                        this.noteField = value;
                        this.OnPropertyChanged("Note");
                    }
                }
                else {
                    this.noteField = value;
                    this.OnPropertyChanged("Note");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(WayBillTypeHeader));
                }
                return serializer;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current WayBillTypeHeader object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an WayBillTypeHeader object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output WayBillTypeHeader object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out WayBillTypeHeader obj, out System.Exception exception) {
            exception = null;
            obj = default(WayBillTypeHeader);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out WayBillTypeHeader obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static WayBillTypeHeader Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((WayBillTypeHeader)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current WayBillTypeHeader object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an WayBillTypeHeader object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output WayBillTypeHeader object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out WayBillTypeHeader obj, out System.Exception exception) {
            exception = null;
            obj = default(WayBillTypeHeader);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out WayBillTypeHeader obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static WayBillTypeHeader LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.4.0.22414")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://fsrar.ru/WEGAIS/TTNSingle")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://fsrar.ru/WEGAIS/TTNSingle", IsNullable=false)]
    public enum WbType {
        
        /// <remarks/>
        WBReturnToMe,
        
        /// <remarks/>
        WBInvoiceToMe,
        
        /// <remarks/>
        WBReturnFromMe,
        
        /// <remarks/>
        WBInvoiceFromMe,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.4.0.22414")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://fsrar.ru/WEGAIS/TTNSingle")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://fsrar.ru/WEGAIS/TTNSingle", IsNullable=false)]
    public enum WbUnitType {
        
        /// <remarks/>
        Packed,
        
        /// <remarks/>
        Unpacked,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.4.0.22414")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://fsrar.ru/WEGAIS/TTNSingle")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://fsrar.ru/WEGAIS/TTNSingle", IsNullable=true)]
    [System.Runtime.Serialization.DataContractAttribute(Name="TransportType", Namespace="http://fsrar.ru/WEGAIS/TTNSingle")]
    public partial class TransportType : System.ComponentModel.INotifyPropertyChanged {
        
        private string tRAN_TYPEField;
        
        private string tRAN_COMPANYField;
        
        private string tRAN_CARField;
        
        private string tRAN_TRAILERField;
        
        private string tRAN_CUSTOMERField;
        
        private string tRAN_DRIVERField;
        
        private string tRAN_LOADPOINTField;
        
        private string tRAN_UNLOADPOINTField;
        
        private string tRAN_REDIRECTField;
        
        private string tRAN_FORWARDERField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TRAN_TYPE {
            get {
                return this.tRAN_TYPEField;
            }
            set {
                if ((this.tRAN_TYPEField != null)) {
                    if ((tRAN_TYPEField.Equals(value) != true)) {
                        this.tRAN_TYPEField = value;
                        this.OnPropertyChanged("TRAN_TYPE");
                    }
                }
                else {
                    this.tRAN_TYPEField = value;
                    this.OnPropertyChanged("TRAN_TYPE");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TRAN_COMPANY {
            get {
                return this.tRAN_COMPANYField;
            }
            set {
                if ((this.tRAN_COMPANYField != null)) {
                    if ((tRAN_COMPANYField.Equals(value) != true)) {
                        this.tRAN_COMPANYField = value;
                        this.OnPropertyChanged("TRAN_COMPANY");
                    }
                }
                else {
                    this.tRAN_COMPANYField = value;
                    this.OnPropertyChanged("TRAN_COMPANY");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TRAN_CAR {
            get {
                return this.tRAN_CARField;
            }
            set {
                if ((this.tRAN_CARField != null)) {
                    if ((tRAN_CARField.Equals(value) != true)) {
                        this.tRAN_CARField = value;
                        this.OnPropertyChanged("TRAN_CAR");
                    }
                }
                else {
                    this.tRAN_CARField = value;
                    this.OnPropertyChanged("TRAN_CAR");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TRAN_TRAILER {
            get {
                return this.tRAN_TRAILERField;
            }
            set {
                if ((this.tRAN_TRAILERField != null)) {
                    if ((tRAN_TRAILERField.Equals(value) != true)) {
                        this.tRAN_TRAILERField = value;
                        this.OnPropertyChanged("TRAN_TRAILER");
                    }
                }
                else {
                    this.tRAN_TRAILERField = value;
                    this.OnPropertyChanged("TRAN_TRAILER");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TRAN_CUSTOMER {
            get {
                return this.tRAN_CUSTOMERField;
            }
            set {
                if ((this.tRAN_CUSTOMERField != null)) {
                    if ((tRAN_CUSTOMERField.Equals(value) != true)) {
                        this.tRAN_CUSTOMERField = value;
                        this.OnPropertyChanged("TRAN_CUSTOMER");
                    }
                }
                else {
                    this.tRAN_CUSTOMERField = value;
                    this.OnPropertyChanged("TRAN_CUSTOMER");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TRAN_DRIVER {
            get {
                return this.tRAN_DRIVERField;
            }
            set {
                if ((this.tRAN_DRIVERField != null)) {
                    if ((tRAN_DRIVERField.Equals(value) != true)) {
                        this.tRAN_DRIVERField = value;
                        this.OnPropertyChanged("TRAN_DRIVER");
                    }
                }
                else {
                    this.tRAN_DRIVERField = value;
                    this.OnPropertyChanged("TRAN_DRIVER");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TRAN_LOADPOINT {
            get {
                return this.tRAN_LOADPOINTField;
            }
            set {
                if ((this.tRAN_LOADPOINTField != null)) {
                    if ((tRAN_LOADPOINTField.Equals(value) != true)) {
                        this.tRAN_LOADPOINTField = value;
                        this.OnPropertyChanged("TRAN_LOADPOINT");
                    }
                }
                else {
                    this.tRAN_LOADPOINTField = value;
                    this.OnPropertyChanged("TRAN_LOADPOINT");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TRAN_UNLOADPOINT {
            get {
                return this.tRAN_UNLOADPOINTField;
            }
            set {
                if ((this.tRAN_UNLOADPOINTField != null)) {
                    if ((tRAN_UNLOADPOINTField.Equals(value) != true)) {
                        this.tRAN_UNLOADPOINTField = value;
                        this.OnPropertyChanged("TRAN_UNLOADPOINT");
                    }
                }
                else {
                    this.tRAN_UNLOADPOINTField = value;
                    this.OnPropertyChanged("TRAN_UNLOADPOINT");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TRAN_REDIRECT {
            get {
                return this.tRAN_REDIRECTField;
            }
            set {
                if ((this.tRAN_REDIRECTField != null)) {
                    if ((tRAN_REDIRECTField.Equals(value) != true)) {
                        this.tRAN_REDIRECTField = value;
                        this.OnPropertyChanged("TRAN_REDIRECT");
                    }
                }
                else {
                    this.tRAN_REDIRECTField = value;
                    this.OnPropertyChanged("TRAN_REDIRECT");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TRAN_FORWARDER {
            get {
                return this.tRAN_FORWARDERField;
            }
            set {
                if ((this.tRAN_FORWARDERField != null)) {
                    if ((tRAN_FORWARDERField.Equals(value) != true)) {
                        this.tRAN_FORWARDERField = value;
                        this.OnPropertyChanged("TRAN_FORWARDER");
                    }
                }
                else {
                    this.tRAN_FORWARDERField = value;
                    this.OnPropertyChanged("TRAN_FORWARDER");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(TransportType));
                }
                return serializer;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TransportType object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an TransportType object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output TransportType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out TransportType obj, out System.Exception exception) {
            exception = null;
            obj = default(TransportType);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out TransportType obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static TransportType Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((TransportType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current TransportType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an TransportType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TransportType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out TransportType obj, out System.Exception exception) {
            exception = null;
            obj = default(TransportType);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out TransportType obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static TransportType LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.4.0.22414")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://fsrar.ru/WEGAIS/TTNSingle")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://fsrar.ru/WEGAIS/TTNSingle", IsNullable=true)]
    [System.Runtime.Serialization.DataContractAttribute(Name="PositionType", Namespace="http://fsrar.ru/WEGAIS/TTNSingle")]
    public partial class PositionType : System.ComponentModel.INotifyPropertyChanged {
        
        private ProductInfo productField;
        
        private string pack_IDField;
        
        private decimal quantityField;
        
        private decimal priceField;
        
        private string partyField;
        
        private string identityField;
        
        private InformAType informAField;
        
        private InformBType informBField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ProductInfo Product {
            get {
                return this.productField;
            }
            set {
                if ((this.productField != null)) {
                    if ((productField.Equals(value) != true)) {
                        this.productField = value;
                        this.OnPropertyChanged("Product");
                    }
                }
                else {
                    this.productField = value;
                    this.OnPropertyChanged("Product");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Pack_ID {
            get {
                return this.pack_IDField;
            }
            set {
                if ((this.pack_IDField != null)) {
                    if ((pack_IDField.Equals(value) != true)) {
                        this.pack_IDField = value;
                        this.OnPropertyChanged("Pack_ID");
                    }
                }
                else {
                    this.pack_IDField = value;
                    this.OnPropertyChanged("Pack_ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal Quantity {
            get {
                return this.quantityField;
            }
            set {
                if ((this.quantityField != null)) {
                    if ((quantityField.Equals(value) != true)) {
                        this.quantityField = value;
                        this.OnPropertyChanged("Quantity");
                    }
                }
                else {
                    this.quantityField = value;
                    this.OnPropertyChanged("Quantity");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal Price {
            get {
                return this.priceField;
            }
            set {
                if ((this.priceField != null)) {
                    if ((priceField.Equals(value) != true)) {
                        this.priceField = value;
                        this.OnPropertyChanged("Price");
                    }
                }
                else {
                    this.priceField = value;
                    this.OnPropertyChanged("Price");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Party {
            get {
                return this.partyField;
            }
            set {
                if ((this.partyField != null)) {
                    if ((partyField.Equals(value) != true)) {
                        this.partyField = value;
                        this.OnPropertyChanged("Party");
                    }
                }
                else {
                    this.partyField = value;
                    this.OnPropertyChanged("Party");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Identity {
            get {
                return this.identityField;
            }
            set {
                if ((this.identityField != null)) {
                    if ((identityField.Equals(value) != true)) {
                        this.identityField = value;
                        this.OnPropertyChanged("Identity");
                    }
                }
                else {
                    this.identityField = value;
                    this.OnPropertyChanged("Identity");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public InformAType InformA {
            get {
                return this.informAField;
            }
            set {
                if ((this.informAField != null)) {
                    if ((informAField.Equals(value) != true)) {
                        this.informAField = value;
                        this.OnPropertyChanged("InformA");
                    }
                }
                else {
                    this.informAField = value;
                    this.OnPropertyChanged("InformA");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public InformBType InformB {
            get {
                return this.informBField;
            }
            set {
                if ((this.informBField != null)) {
                    if ((informBField.Equals(value) != true)) {
                        this.informBField = value;
                        this.OnPropertyChanged("InformB");
                    }
                }
                else {
                    this.informBField = value;
                    this.OnPropertyChanged("InformB");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(PositionType));
                }
                return serializer;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current PositionType object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an PositionType object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output PositionType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out PositionType obj, out System.Exception exception) {
            exception = null;
            obj = default(PositionType);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out PositionType obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static PositionType Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((PositionType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current PositionType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an PositionType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output PositionType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out PositionType obj, out System.Exception exception) {
            exception = null;
            obj = default(PositionType);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out PositionType obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static PositionType LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
}
