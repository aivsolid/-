// ------------------------------------------------------------------------------
//  <auto-generated>
//    Generated by Xsd2Code. Version 3.4.0.22408 Microsoft Reciprocal License (Ms-RL) 
//    <NameSpace>Egais.Entities.ProductRef_v2</NameSpace><Collection>List</Collection><codeType>CSharp</codeType><EnableDataBinding>True</EnableDataBinding><EnableLazyLoading>False</EnableLazyLoading><TrackingChangesEnable>False</TrackingChangesEnable><GenTrackingClasses>False</GenTrackingClasses><HidePrivateFieldInIDE>False</HidePrivateFieldInIDE><EnableSummaryComment>False</EnableSummaryComment><VirtualProp>False</VirtualProp><IncludeSerializeMethod>True</IncludeSerializeMethod><UseBaseClass>False</UseBaseClass><GenBaseClass>False</GenBaseClass><GenerateCloneMethod>False</GenerateCloneMethod><GenerateDataContracts>True</GenerateDataContracts><CodeBaseTag>Net35</CodeBaseTag><SerializeMethodName>Serialize</SerializeMethodName><DeserializeMethodName>Deserialize</DeserializeMethodName><SaveToFileMethodName>SaveToFile</SaveToFileMethodName><LoadFromFileMethodName>LoadFromFile</LoadFromFileMethodName><GenerateXMLAttributes>True</GenerateXMLAttributes><OrderXMLAttrib>False</OrderXMLAttrib><EnableEncoding>False</EnableEncoding><AutomaticProperties>False</AutomaticProperties><GenerateShouldSerialize>False</GenerateShouldSerialize><DisableDebug>False</DisableDebug><PropNameSpecified>Default</PropNameSpecified><Encoder>UTF8</Encoder><CustomUsings></CustomUsings><ExcludeIncludedTypes>True</ExcludeIncludedTypes><EnableInitializeFields>True</EnableInitializeFields>
//  </auto-generated>
// ------------------------------------------------------------------------------
namespace Egais.Entities.ProductRef_v2 {
    using System;
    using System.Diagnostics;
    using System.Xml.Serialization;
    using System.Collections;
    using System.Xml.Schema;
    using System.ComponentModel;
    using System.IO;
    using System.Text;
    using System.Collections.Generic;
    using System.Runtime.Serialization;

    using Egais.Entities.EGCommon;
    using Egais.Entities.EGCommonEnum;
    using Egais.Entities.ClientRef_v2;


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.4.0.22414")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://fsrar.ru/WEGAIS/ProductRef_v2")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://fsrar.ru/WEGAIS/ProductRef_v2", IsNullable=true)]
    [System.Runtime.Serialization.DataContractAttribute(Name="ProductsType_v2", Namespace="http://fsrar.ru/WEGAIS/ProductRef_v2")]
    public partial class ProductsType_v2 : System.ComponentModel.INotifyPropertyChanged {
        
        private List<ProductInfo_v2> productField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        public ProductsType_v2() {
            this.productField = new List<ProductInfo_v2>();
        }
        
        [System.Xml.Serialization.XmlElementAttribute("Product")]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<ProductInfo_v2> Product {
            get {
                return this.productField;
            }
            set {
                if ((this.productField != null)) {
                    if ((productField.Equals(value) != true)) {
                        this.productField = value;
                        this.OnPropertyChanged("Product");
                    }
                }
                else {
                    this.productField = value;
                    this.OnPropertyChanged("Product");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ProductsType_v2));
                }
                return serializer;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ProductsType_v2 object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an ProductsType_v2 object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ProductsType_v2 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ProductsType_v2 obj, out System.Exception exception) {
            exception = null;
            obj = default(ProductsType_v2);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out ProductsType_v2 obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static ProductsType_v2 Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((ProductsType_v2)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current ProductsType_v2 object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an ProductsType_v2 object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ProductsType_v2 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out ProductsType_v2 obj, out System.Exception exception) {
            exception = null;
            obj = default(ProductsType_v2);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out ProductsType_v2 obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static ProductsType_v2 LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.4.0.22414")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://fsrar.ru/WEGAIS/ProductRef_v2")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://fsrar.ru/WEGAIS/ProductRef_v2", IsNullable=true)]
    [System.Runtime.Serialization.DataContractAttribute(Name="ProductInfo_v2", Namespace="http://fsrar.ru/WEGAIS/ProductRef_v2")]
    public partial class ProductInfo_v2 : System.ComponentModel.INotifyPropertyChanged {
        
        private WbUnitType unitTypeField;
        
        private ProductType typeField;
        
        private bool typeFieldSpecified;
        
        private string fullNameField;
        
        private string shortNameField;
        
        private string alcCodeField;
        
        private decimal capacityField;
        
        private bool capacityFieldSpecified;
        
        private decimal alcVolumeField;
        
        private bool alcVolumeFieldSpecified;
        
        private OrgInfo_v2 producerField;
        
        private string productVCodeField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        public ProductInfo_v2() {
            this.producerField = new OrgInfo_v2();
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public WbUnitType UnitType {
            get {
                return this.unitTypeField;
            }
            set {
                if ((unitTypeField.Equals(value) != true)) {
                    this.unitTypeField = value;
                    this.OnPropertyChanged("UnitType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ProductType Type {
            get {
                return this.typeField;
            }
            set {
                if ((typeField.Equals(value) != true)) {
                    this.typeField = value;
                    this.OnPropertyChanged("Type");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool TypeSpecified {
            get {
                return this.typeFieldSpecified;
            }
            set {
                if ((typeFieldSpecified.Equals(value) != true)) {
                    this.typeFieldSpecified = value;
                    this.OnPropertyChanged("TypeSpecified");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FullName {
            get {
                return this.fullNameField;
            }
            set {
                if ((this.fullNameField != null)) {
                    if ((fullNameField.Equals(value) != true)) {
                        this.fullNameField = value;
                        this.OnPropertyChanged("FullName");
                    }
                }
                else {
                    this.fullNameField = value;
                    this.OnPropertyChanged("FullName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ShortName {
            get {
                return this.shortNameField;
            }
            set {
                if ((this.shortNameField != null)) {
                    if ((shortNameField.Equals(value) != true)) {
                        this.shortNameField = value;
                        this.OnPropertyChanged("ShortName");
                    }
                }
                else {
                    this.shortNameField = value;
                    this.OnPropertyChanged("ShortName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AlcCode {
            get {
                return this.alcCodeField;
            }
            set {
                if ((this.alcCodeField != null)) {
                    if ((alcCodeField.Equals(value) != true)) {
                        this.alcCodeField = value;
                        this.OnPropertyChanged("AlcCode");
                    }
                }
                else {
                    this.alcCodeField = value;
                    this.OnPropertyChanged("AlcCode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal Capacity {
            get {
                return this.capacityField;
            }
            set {
                if ((this.capacityField != null)) {
                    if ((capacityField.Equals(value) != true)) {
                        this.capacityField = value;
                        this.OnPropertyChanged("Capacity");
                    }
                }
                else {
                    this.capacityField = value;
                    this.OnPropertyChanged("Capacity");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool CapacitySpecified {
            get {
                return this.capacityFieldSpecified;
            }
            set {
                if ((capacityFieldSpecified.Equals(value) != true)) {
                    this.capacityFieldSpecified = value;
                    this.OnPropertyChanged("CapacitySpecified");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal AlcVolume {
            get {
                return this.alcVolumeField;
            }
            set {
                if ((this.alcVolumeField != null)) {
                    if ((alcVolumeField.Equals(value) != true)) {
                        this.alcVolumeField = value;
                        this.OnPropertyChanged("AlcVolume");
                    }
                }
                else {
                    this.alcVolumeField = value;
                    this.OnPropertyChanged("AlcVolume");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool AlcVolumeSpecified {
            get {
                return this.alcVolumeFieldSpecified;
            }
            set {
                if ((alcVolumeFieldSpecified.Equals(value) != true)) {
                    this.alcVolumeFieldSpecified = value;
                    this.OnPropertyChanged("AlcVolumeSpecified");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public OrgInfo_v2 Producer {
            get {
                return this.producerField;
            }
            set {
                if ((this.producerField != null)) {
                    if ((producerField.Equals(value) != true)) {
                        this.producerField = value;
                        this.OnPropertyChanged("Producer");
                    }
                }
                else {
                    this.producerField = value;
                    this.OnPropertyChanged("Producer");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ProductVCode {
            get {
                return this.productVCodeField;
            }
            set {
                if ((this.productVCodeField != null)) {
                    if ((productVCodeField.Equals(value) != true)) {
                        this.productVCodeField = value;
                        this.OnPropertyChanged("ProductVCode");
                    }
                }
                else {
                    this.productVCodeField = value;
                    this.OnPropertyChanged("ProductVCode");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ProductInfo_v2));
                }
                return serializer;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ProductInfo_v2 object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an ProductInfo_v2 object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ProductInfo_v2 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ProductInfo_v2 obj, out System.Exception exception) {
            exception = null;
            obj = default(ProductInfo_v2);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out ProductInfo_v2 obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static ProductInfo_v2 Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((ProductInfo_v2)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current ProductInfo_v2 object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an ProductInfo_v2 object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ProductInfo_v2 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out ProductInfo_v2 obj, out System.Exception exception) {
            exception = null;
            obj = default(ProductInfo_v2);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out ProductInfo_v2 obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static ProductInfo_v2 LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.4.0.22414")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://fsrar.ru/WEGAIS/ProductRef_v2")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://fsrar.ru/WEGAIS/ProductRef_v2", IsNullable=false)]
    public enum WbUnitType {
        
        /// <remarks/>
        Packed,
        
        /// <remarks/>
        Unpacked,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.4.0.22414")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://fsrar.ru/WEGAIS/ProductRef_v2")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://fsrar.ru/WEGAIS/ProductRef_v2", IsNullable=false)]
    public enum ProductType {
        
        /// <remarks/>
        АП,
        
        /// <remarks/>
        ССП,
        
        /// <remarks/>
        ССНП,
        
        /// <remarks/>
        Спирт,
        
        /// <remarks/>
        УБП,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.4.0.22414")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://fsrar.ru/WEGAIS/ProductRef_v2")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://fsrar.ru/WEGAIS/ProductRef_v2", IsNullable=true)]
    [System.Runtime.Serialization.DataContractAttribute(Name="MarkInfoType", Namespace="http://fsrar.ru/WEGAIS/ProductRef_v2")]
    public partial class MarkInfoType : System.ComponentModel.INotifyPropertyChanged {
        
        private TypeEnum typeField;
        
        private List<MarkInfoTypeRange> rangesField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        public MarkInfoType() {
            this.rangesField = new List<MarkInfoTypeRange>();
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public TypeEnum Type {
            get {
                return this.typeField;
            }
            set {
                if ((typeField.Equals(value) != true)) {
                    this.typeField = value;
                    this.OnPropertyChanged("Type");
                }
            }
        }
        
        [System.Xml.Serialization.XmlArrayItemAttribute("Range", IsNullable=false)]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public List<MarkInfoTypeRange> Ranges {
            get {
                return this.rangesField;
            }
            set {
                if ((this.rangesField != null)) {
                    if ((rangesField.Equals(value) != true)) {
                        this.rangesField = value;
                        this.OnPropertyChanged("Ranges");
                    }
                }
                else {
                    this.rangesField = value;
                    this.OnPropertyChanged("Ranges");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(MarkInfoType));
                }
                return serializer;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current MarkInfoType object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an MarkInfoType object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output MarkInfoType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out MarkInfoType obj, out System.Exception exception) {
            exception = null;
            obj = default(MarkInfoType);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out MarkInfoType obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static MarkInfoType Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((MarkInfoType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current MarkInfoType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an MarkInfoType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output MarkInfoType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out MarkInfoType obj, out System.Exception exception) {
            exception = null;
            obj = default(MarkInfoType);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out MarkInfoType obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static MarkInfoType LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.4.0.22414")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://fsrar.ru/WEGAIS/ProductRef_v2")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MarkInfoTypeRange", Namespace="http://fsrar.ru/WEGAIS/ProductRef_v2")]
    public partial class MarkInfoTypeRange : System.ComponentModel.INotifyPropertyChanged {
        
        private string identityField;
        
        private string rankField;
        
        private string startField;
        
        private string lastField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Identity {
            get {
                return this.identityField;
            }
            set {
                if ((this.identityField != null)) {
                    if ((identityField.Equals(value) != true)) {
                        this.identityField = value;
                        this.OnPropertyChanged("Identity");
                    }
                }
                else {
                    this.identityField = value;
                    this.OnPropertyChanged("Identity");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Rank {
            get {
                return this.rankField;
            }
            set {
                if ((this.rankField != null)) {
                    if ((rankField.Equals(value) != true)) {
                        this.rankField = value;
                        this.OnPropertyChanged("Rank");
                    }
                }
                else {
                    this.rankField = value;
                    this.OnPropertyChanged("Rank");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Start {
            get {
                return this.startField;
            }
            set {
                if ((this.startField != null)) {
                    if ((startField.Equals(value) != true)) {
                        this.startField = value;
                        this.OnPropertyChanged("Start");
                    }
                }
                else {
                    this.startField = value;
                    this.OnPropertyChanged("Start");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Last {
            get {
                return this.lastField;
            }
            set {
                if ((this.lastField != null)) {
                    if ((lastField.Equals(value) != true)) {
                        this.lastField = value;
                        this.OnPropertyChanged("Last");
                    }
                }
                else {
                    this.lastField = value;
                    this.OnPropertyChanged("Last");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(MarkInfoTypeRange));
                }
                return serializer;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current MarkInfoTypeRange object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an MarkInfoTypeRange object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output MarkInfoTypeRange object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out MarkInfoTypeRange obj, out System.Exception exception) {
            exception = null;
            obj = default(MarkInfoTypeRange);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out MarkInfoTypeRange obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static MarkInfoTypeRange Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((MarkInfoTypeRange)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current MarkInfoTypeRange object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an MarkInfoTypeRange object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output MarkInfoTypeRange object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out MarkInfoTypeRange obj, out System.Exception exception) {
            exception = null;
            obj = default(MarkInfoTypeRange);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out MarkInfoTypeRange obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static MarkInfoTypeRange LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.4.0.22414")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://fsrar.ru/WEGAIS/ProductRef_v2")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://fsrar.ru/WEGAIS/ProductRef_v2", IsNullable=true)]
    [System.Runtime.Serialization.DataContractAttribute(Name="ProductInfoTest_v2", Namespace="http://fsrar.ru/WEGAIS/ProductRef_v2")]
    public partial class ProductInfoTest_v2 : System.ComponentModel.INotifyPropertyChanged {
        
        private object itemField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        [System.Xml.Serialization.XmlElementAttribute("Domestic", typeof(ProductInfoRus_v2))]
        [System.Xml.Serialization.XmlElementAttribute("Foreign", typeof(ProductInfoForeign_v2))]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public object Item {
            get {
                return this.itemField;
            }
            set {
                if ((this.itemField != null)) {
                    if ((itemField.Equals(value) != true)) {
                        this.itemField = value;
                        this.OnPropertyChanged("Item");
                    }
                }
                else {
                    this.itemField = value;
                    this.OnPropertyChanged("Item");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ProductInfoTest_v2));
                }
                return serializer;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ProductInfoTest_v2 object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an ProductInfoTest_v2 object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ProductInfoTest_v2 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ProductInfoTest_v2 obj, out System.Exception exception) {
            exception = null;
            obj = default(ProductInfoTest_v2);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out ProductInfoTest_v2 obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static ProductInfoTest_v2 Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((ProductInfoTest_v2)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current ProductInfoTest_v2 object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an ProductInfoTest_v2 object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ProductInfoTest_v2 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out ProductInfoTest_v2 obj, out System.Exception exception) {
            exception = null;
            obj = default(ProductInfoTest_v2);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out ProductInfoTest_v2 obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static ProductInfoTest_v2 LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.4.0.22414")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://fsrar.ru/WEGAIS/ProductRef_v2")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://fsrar.ru/WEGAIS/ProductRef_v2", IsNullable=true)]
    [System.Runtime.Serialization.DataContractAttribute(Name="ProductInfoRus_v2", Namespace="http://fsrar.ru/WEGAIS/ProductRef_v2")]
    public partial class ProductInfoRus_v2 : System.ComponentModel.INotifyPropertyChanged {
        
        private WbUnitType unitTypeField;
        
        private ProductType typeField;
        
        private bool typeFieldSpecified;
        
        private string fullNameField;
        
        private string shortNameField;
        
        private string alcCodeField;
        
        private decimal capacityField;
        
        private bool capacityFieldSpecified;
        
        private decimal alcVolumeField;
        
        private bool alcVolumeFieldSpecified;
        
        private OrgInfoRus_v2 producerField;
        
        private string productVCodeField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        public ProductInfoRus_v2() {
            this.producerField = new OrgInfoRus_v2();
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public WbUnitType UnitType {
            get {
                return this.unitTypeField;
            }
            set {
                if ((unitTypeField.Equals(value) != true)) {
                    this.unitTypeField = value;
                    this.OnPropertyChanged("UnitType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ProductType Type {
            get {
                return this.typeField;
            }
            set {
                if ((typeField.Equals(value) != true)) {
                    this.typeField = value;
                    this.OnPropertyChanged("Type");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool TypeSpecified {
            get {
                return this.typeFieldSpecified;
            }
            set {
                if ((typeFieldSpecified.Equals(value) != true)) {
                    this.typeFieldSpecified = value;
                    this.OnPropertyChanged("TypeSpecified");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FullName {
            get {
                return this.fullNameField;
            }
            set {
                if ((this.fullNameField != null)) {
                    if ((fullNameField.Equals(value) != true)) {
                        this.fullNameField = value;
                        this.OnPropertyChanged("FullName");
                    }
                }
                else {
                    this.fullNameField = value;
                    this.OnPropertyChanged("FullName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ShortName {
            get {
                return this.shortNameField;
            }
            set {
                if ((this.shortNameField != null)) {
                    if ((shortNameField.Equals(value) != true)) {
                        this.shortNameField = value;
                        this.OnPropertyChanged("ShortName");
                    }
                }
                else {
                    this.shortNameField = value;
                    this.OnPropertyChanged("ShortName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AlcCode {
            get {
                return this.alcCodeField;
            }
            set {
                if ((this.alcCodeField != null)) {
                    if ((alcCodeField.Equals(value) != true)) {
                        this.alcCodeField = value;
                        this.OnPropertyChanged("AlcCode");
                    }
                }
                else {
                    this.alcCodeField = value;
                    this.OnPropertyChanged("AlcCode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal Capacity {
            get {
                return this.capacityField;
            }
            set {
                if ((this.capacityField != null)) {
                    if ((capacityField.Equals(value) != true)) {
                        this.capacityField = value;
                        this.OnPropertyChanged("Capacity");
                    }
                }
                else {
                    this.capacityField = value;
                    this.OnPropertyChanged("Capacity");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool CapacitySpecified {
            get {
                return this.capacityFieldSpecified;
            }
            set {
                if ((capacityFieldSpecified.Equals(value) != true)) {
                    this.capacityFieldSpecified = value;
                    this.OnPropertyChanged("CapacitySpecified");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal AlcVolume {
            get {
                return this.alcVolumeField;
            }
            set {
                if ((this.alcVolumeField != null)) {
                    if ((alcVolumeField.Equals(value) != true)) {
                        this.alcVolumeField = value;
                        this.OnPropertyChanged("AlcVolume");
                    }
                }
                else {
                    this.alcVolumeField = value;
                    this.OnPropertyChanged("AlcVolume");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool AlcVolumeSpecified {
            get {
                return this.alcVolumeFieldSpecified;
            }
            set {
                if ((alcVolumeFieldSpecified.Equals(value) != true)) {
                    this.alcVolumeFieldSpecified = value;
                    this.OnPropertyChanged("AlcVolumeSpecified");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public OrgInfoRus_v2 Producer {
            get {
                return this.producerField;
            }
            set {
                if ((this.producerField != null)) {
                    if ((producerField.Equals(value) != true)) {
                        this.producerField = value;
                        this.OnPropertyChanged("Producer");
                    }
                }
                else {
                    this.producerField = value;
                    this.OnPropertyChanged("Producer");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ProductVCode {
            get {
                return this.productVCodeField;
            }
            set {
                if ((this.productVCodeField != null)) {
                    if ((productVCodeField.Equals(value) != true)) {
                        this.productVCodeField = value;
                        this.OnPropertyChanged("ProductVCode");
                    }
                }
                else {
                    this.productVCodeField = value;
                    this.OnPropertyChanged("ProductVCode");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ProductInfoRus_v2));
                }
                return serializer;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ProductInfoRus_v2 object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an ProductInfoRus_v2 object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ProductInfoRus_v2 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ProductInfoRus_v2 obj, out System.Exception exception) {
            exception = null;
            obj = default(ProductInfoRus_v2);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out ProductInfoRus_v2 obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static ProductInfoRus_v2 Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((ProductInfoRus_v2)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current ProductInfoRus_v2 object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an ProductInfoRus_v2 object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ProductInfoRus_v2 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out ProductInfoRus_v2 obj, out System.Exception exception) {
            exception = null;
            obj = default(ProductInfoRus_v2);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out ProductInfoRus_v2 obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static ProductInfoRus_v2 LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.4.0.22414")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://fsrar.ru/WEGAIS/ProductRef_v2")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://fsrar.ru/WEGAIS/ProductRef_v2", IsNullable=true)]
    [System.Runtime.Serialization.DataContractAttribute(Name="ProductInfoForeign_v2", Namespace="http://fsrar.ru/WEGAIS/ProductRef_v2")]
    public partial class ProductInfoForeign_v2 : System.ComponentModel.INotifyPropertyChanged {
        
        private WbUnitType unitTypeField;
        
        private ProductType typeField;
        
        private bool typeFieldSpecified;
        
        private string fullNameField;
        
        private string shortNameField;
        
        private string alcCodeField;
        
        private decimal capacityField;
        
        private bool capacityFieldSpecified;
        
        private decimal alcVolumeField;
        
        private bool alcVolumeFieldSpecified;
        
        private OrgInfoForeign_v2 producerField;
        
        private OrgInfoRus_v2 importerField;
        
        private string productVCodeField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        public ProductInfoForeign_v2() {
            this.producerField = new OrgInfoForeign_v2();
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public WbUnitType UnitType {
            get {
                return this.unitTypeField;
            }
            set {
                if ((unitTypeField.Equals(value) != true)) {
                    this.unitTypeField = value;
                    this.OnPropertyChanged("UnitType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ProductType Type {
            get {
                return this.typeField;
            }
            set {
                if ((typeField.Equals(value) != true)) {
                    this.typeField = value;
                    this.OnPropertyChanged("Type");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool TypeSpecified {
            get {
                return this.typeFieldSpecified;
            }
            set {
                if ((typeFieldSpecified.Equals(value) != true)) {
                    this.typeFieldSpecified = value;
                    this.OnPropertyChanged("TypeSpecified");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FullName {
            get {
                return this.fullNameField;
            }
            set {
                if ((this.fullNameField != null)) {
                    if ((fullNameField.Equals(value) != true)) {
                        this.fullNameField = value;
                        this.OnPropertyChanged("FullName");
                    }
                }
                else {
                    this.fullNameField = value;
                    this.OnPropertyChanged("FullName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ShortName {
            get {
                return this.shortNameField;
            }
            set {
                if ((this.shortNameField != null)) {
                    if ((shortNameField.Equals(value) != true)) {
                        this.shortNameField = value;
                        this.OnPropertyChanged("ShortName");
                    }
                }
                else {
                    this.shortNameField = value;
                    this.OnPropertyChanged("ShortName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AlcCode {
            get {
                return this.alcCodeField;
            }
            set {
                if ((this.alcCodeField != null)) {
                    if ((alcCodeField.Equals(value) != true)) {
                        this.alcCodeField = value;
                        this.OnPropertyChanged("AlcCode");
                    }
                }
                else {
                    this.alcCodeField = value;
                    this.OnPropertyChanged("AlcCode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal Capacity {
            get {
                return this.capacityField;
            }
            set {
                if ((this.capacityField != null)) {
                    if ((capacityField.Equals(value) != true)) {
                        this.capacityField = value;
                        this.OnPropertyChanged("Capacity");
                    }
                }
                else {
                    this.capacityField = value;
                    this.OnPropertyChanged("Capacity");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool CapacitySpecified {
            get {
                return this.capacityFieldSpecified;
            }
            set {
                if ((capacityFieldSpecified.Equals(value) != true)) {
                    this.capacityFieldSpecified = value;
                    this.OnPropertyChanged("CapacitySpecified");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal AlcVolume {
            get {
                return this.alcVolumeField;
            }
            set {
                if ((this.alcVolumeField != null)) {
                    if ((alcVolumeField.Equals(value) != true)) {
                        this.alcVolumeField = value;
                        this.OnPropertyChanged("AlcVolume");
                    }
                }
                else {
                    this.alcVolumeField = value;
                    this.OnPropertyChanged("AlcVolume");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool AlcVolumeSpecified {
            get {
                return this.alcVolumeFieldSpecified;
            }
            set {
                if ((alcVolumeFieldSpecified.Equals(value) != true)) {
                    this.alcVolumeFieldSpecified = value;
                    this.OnPropertyChanged("AlcVolumeSpecified");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public OrgInfoForeign_v2 Producer {
            get {
                return this.producerField;
            }
            set {
                if ((this.producerField != null)) {
                    if ((producerField.Equals(value) != true)) {
                        this.producerField = value;
                        this.OnPropertyChanged("Producer");
                    }
                }
                else {
                    this.producerField = value;
                    this.OnPropertyChanged("Producer");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public OrgInfoRus_v2 Importer {
            get {
                return this.importerField;
            }
            set {
                if ((this.importerField != null)) {
                    if ((importerField.Equals(value) != true)) {
                        this.importerField = value;
                        this.OnPropertyChanged("Importer");
                    }
                }
                else {
                    this.importerField = value;
                    this.OnPropertyChanged("Importer");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ProductVCode {
            get {
                return this.productVCodeField;
            }
            set {
                if ((this.productVCodeField != null)) {
                    if ((productVCodeField.Equals(value) != true)) {
                        this.productVCodeField = value;
                        this.OnPropertyChanged("ProductVCode");
                    }
                }
                else {
                    this.productVCodeField = value;
                    this.OnPropertyChanged("ProductVCode");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ProductInfoForeign_v2));
                }
                return serializer;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ProductInfoForeign_v2 object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an ProductInfoForeign_v2 object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ProductInfoForeign_v2 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ProductInfoForeign_v2 obj, out System.Exception exception) {
            exception = null;
            obj = default(ProductInfoForeign_v2);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out ProductInfoForeign_v2 obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static ProductInfoForeign_v2 Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((ProductInfoForeign_v2)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current ProductInfoForeign_v2 object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an ProductInfoForeign_v2 object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ProductInfoForeign_v2 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out ProductInfoForeign_v2 obj, out System.Exception exception) {
            exception = null;
            obj = default(ProductInfoForeign_v2);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out ProductInfoForeign_v2 obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static ProductInfoForeign_v2 LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.4.0.22414")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://fsrar.ru/WEGAIS/ProductRef_v2")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://fsrar.ru/WEGAIS/ProductRef_v2", IsNullable=true)]
    [System.Runtime.Serialization.DataContractAttribute(Name="ProductInfoReply_v2", Namespace="http://fsrar.ru/WEGAIS/ProductRef_v2")]
    public partial class ProductInfoReply_v2 : System.ComponentModel.INotifyPropertyChanged {
        
        private WbUnitType unitTypeField;
        
        private ProductType typeField;
        
        private bool typeFieldSpecified;
        
        private string fullNameField;
        
        private string shortNameField;
        
        private string alcCodeField;
        
        private decimal capacityField;
        
        private bool capacityFieldSpecified;
        
        private decimal alcVolumeField;
        
        private bool alcVolumeFieldSpecified;
        
        private OrgInfoReply_v2 producerField;
        
        private string productVCodeField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        public ProductInfoReply_v2() {
            this.producerField = new OrgInfoReply_v2();
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public WbUnitType UnitType {
            get {
                return this.unitTypeField;
            }
            set {
                if ((unitTypeField.Equals(value) != true)) {
                    this.unitTypeField = value;
                    this.OnPropertyChanged("UnitType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ProductType Type {
            get {
                return this.typeField;
            }
            set {
                if ((typeField.Equals(value) != true)) {
                    this.typeField = value;
                    this.OnPropertyChanged("Type");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool TypeSpecified {
            get {
                return this.typeFieldSpecified;
            }
            set {
                if ((typeFieldSpecified.Equals(value) != true)) {
                    this.typeFieldSpecified = value;
                    this.OnPropertyChanged("TypeSpecified");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FullName {
            get {
                return this.fullNameField;
            }
            set {
                if ((this.fullNameField != null)) {
                    if ((fullNameField.Equals(value) != true)) {
                        this.fullNameField = value;
                        this.OnPropertyChanged("FullName");
                    }
                }
                else {
                    this.fullNameField = value;
                    this.OnPropertyChanged("FullName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ShortName {
            get {
                return this.shortNameField;
            }
            set {
                if ((this.shortNameField != null)) {
                    if ((shortNameField.Equals(value) != true)) {
                        this.shortNameField = value;
                        this.OnPropertyChanged("ShortName");
                    }
                }
                else {
                    this.shortNameField = value;
                    this.OnPropertyChanged("ShortName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AlcCode {
            get {
                return this.alcCodeField;
            }
            set {
                if ((this.alcCodeField != null)) {
                    if ((alcCodeField.Equals(value) != true)) {
                        this.alcCodeField = value;
                        this.OnPropertyChanged("AlcCode");
                    }
                }
                else {
                    this.alcCodeField = value;
                    this.OnPropertyChanged("AlcCode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal Capacity {
            get {
                return this.capacityField;
            }
            set {
                if ((this.capacityField != null)) {
                    if ((capacityField.Equals(value) != true)) {
                        this.capacityField = value;
                        this.OnPropertyChanged("Capacity");
                    }
                }
                else {
                    this.capacityField = value;
                    this.OnPropertyChanged("Capacity");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool CapacitySpecified {
            get {
                return this.capacityFieldSpecified;
            }
            set {
                if ((capacityFieldSpecified.Equals(value) != true)) {
                    this.capacityFieldSpecified = value;
                    this.OnPropertyChanged("CapacitySpecified");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal AlcVolume {
            get {
                return this.alcVolumeField;
            }
            set {
                if ((this.alcVolumeField != null)) {
                    if ((alcVolumeField.Equals(value) != true)) {
                        this.alcVolumeField = value;
                        this.OnPropertyChanged("AlcVolume");
                    }
                }
                else {
                    this.alcVolumeField = value;
                    this.OnPropertyChanged("AlcVolume");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool AlcVolumeSpecified {
            get {
                return this.alcVolumeFieldSpecified;
            }
            set {
                if ((alcVolumeFieldSpecified.Equals(value) != true)) {
                    this.alcVolumeFieldSpecified = value;
                    this.OnPropertyChanged("AlcVolumeSpecified");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public OrgInfoReply_v2 Producer {
            get {
                return this.producerField;
            }
            set {
                if ((this.producerField != null)) {
                    if ((producerField.Equals(value) != true)) {
                        this.producerField = value;
                        this.OnPropertyChanged("Producer");
                    }
                }
                else {
                    this.producerField = value;
                    this.OnPropertyChanged("Producer");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ProductVCode {
            get {
                return this.productVCodeField;
            }
            set {
                if ((this.productVCodeField != null)) {
                    if ((productVCodeField.Equals(value) != true)) {
                        this.productVCodeField = value;
                        this.OnPropertyChanged("ProductVCode");
                    }
                }
                else {
                    this.productVCodeField = value;
                    this.OnPropertyChanged("ProductVCode");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ProductInfoReply_v2));
                }
                return serializer;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ProductInfoReply_v2 object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an ProductInfoReply_v2 object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ProductInfoReply_v2 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ProductInfoReply_v2 obj, out System.Exception exception) {
            exception = null;
            obj = default(ProductInfoReply_v2);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out ProductInfoReply_v2 obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static ProductInfoReply_v2 Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((ProductInfoReply_v2)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current ProductInfoReply_v2 object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an ProductInfoReply_v2 object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ProductInfoReply_v2 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out ProductInfoReply_v2 obj, out System.Exception exception) {
            exception = null;
            obj = default(ProductInfoReply_v2);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out ProductInfoReply_v2 obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static ProductInfoReply_v2 LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.4.0.22414")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://fsrar.ru/WEGAIS/ProductRef_v2")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://fsrar.ru/WEGAIS/ProductRef_v2", IsNullable=true)]
    [System.Runtime.Serialization.DataContractAttribute(Name="ProductInfoAsiiu_v2", Namespace="http://fsrar.ru/WEGAIS/ProductRef_v2")]
    public partial class ProductInfoAsiiu_v2 : System.ComponentModel.INotifyPropertyChanged {
        
        private WbUnitType unitTypeField;
        
        private ProductType typeField;
        
        private bool typeFieldSpecified;
        
        private string fullNameField;
        
        private string shortNameField;
        
        private string alcCodeField;
        
        private decimal capacityField;
        
        private bool capacityFieldSpecified;
        
        private decimal alcVolumeField;
        
        private bool alcVolumeFieldSpecified;
        
        private string productVCodeField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public WbUnitType UnitType {
            get {
                return this.unitTypeField;
            }
            set {
                if ((unitTypeField.Equals(value) != true)) {
                    this.unitTypeField = value;
                    this.OnPropertyChanged("UnitType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ProductType Type {
            get {
                return this.typeField;
            }
            set {
                if ((typeField.Equals(value) != true)) {
                    this.typeField = value;
                    this.OnPropertyChanged("Type");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool TypeSpecified {
            get {
                return this.typeFieldSpecified;
            }
            set {
                if ((typeFieldSpecified.Equals(value) != true)) {
                    this.typeFieldSpecified = value;
                    this.OnPropertyChanged("TypeSpecified");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FullName {
            get {
                return this.fullNameField;
            }
            set {
                if ((this.fullNameField != null)) {
                    if ((fullNameField.Equals(value) != true)) {
                        this.fullNameField = value;
                        this.OnPropertyChanged("FullName");
                    }
                }
                else {
                    this.fullNameField = value;
                    this.OnPropertyChanged("FullName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ShortName {
            get {
                return this.shortNameField;
            }
            set {
                if ((this.shortNameField != null)) {
                    if ((shortNameField.Equals(value) != true)) {
                        this.shortNameField = value;
                        this.OnPropertyChanged("ShortName");
                    }
                }
                else {
                    this.shortNameField = value;
                    this.OnPropertyChanged("ShortName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AlcCode {
            get {
                return this.alcCodeField;
            }
            set {
                if ((this.alcCodeField != null)) {
                    if ((alcCodeField.Equals(value) != true)) {
                        this.alcCodeField = value;
                        this.OnPropertyChanged("AlcCode");
                    }
                }
                else {
                    this.alcCodeField = value;
                    this.OnPropertyChanged("AlcCode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal Capacity {
            get {
                return this.capacityField;
            }
            set {
                if ((this.capacityField != null)) {
                    if ((capacityField.Equals(value) != true)) {
                        this.capacityField = value;
                        this.OnPropertyChanged("Capacity");
                    }
                }
                else {
                    this.capacityField = value;
                    this.OnPropertyChanged("Capacity");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool CapacitySpecified {
            get {
                return this.capacityFieldSpecified;
            }
            set {
                if ((capacityFieldSpecified.Equals(value) != true)) {
                    this.capacityFieldSpecified = value;
                    this.OnPropertyChanged("CapacitySpecified");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal AlcVolume {
            get {
                return this.alcVolumeField;
            }
            set {
                if ((this.alcVolumeField != null)) {
                    if ((alcVolumeField.Equals(value) != true)) {
                        this.alcVolumeField = value;
                        this.OnPropertyChanged("AlcVolume");
                    }
                }
                else {
                    this.alcVolumeField = value;
                    this.OnPropertyChanged("AlcVolume");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool AlcVolumeSpecified {
            get {
                return this.alcVolumeFieldSpecified;
            }
            set {
                if ((alcVolumeFieldSpecified.Equals(value) != true)) {
                    this.alcVolumeFieldSpecified = value;
                    this.OnPropertyChanged("AlcVolumeSpecified");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ProductVCode {
            get {
                return this.productVCodeField;
            }
            set {
                if ((this.productVCodeField != null)) {
                    if ((productVCodeField.Equals(value) != true)) {
                        this.productVCodeField = value;
                        this.OnPropertyChanged("ProductVCode");
                    }
                }
                else {
                    this.productVCodeField = value;
                    this.OnPropertyChanged("ProductVCode");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ProductInfoAsiiu_v2));
                }
                return serializer;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ProductInfoAsiiu_v2 object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an ProductInfoAsiiu_v2 object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ProductInfoAsiiu_v2 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ProductInfoAsiiu_v2 obj, out System.Exception exception) {
            exception = null;
            obj = default(ProductInfoAsiiu_v2);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out ProductInfoAsiiu_v2 obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static ProductInfoAsiiu_v2 Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((ProductInfoAsiiu_v2)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current ProductInfoAsiiu_v2 object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an ProductInfoAsiiu_v2 object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ProductInfoAsiiu_v2 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out ProductInfoAsiiu_v2 obj, out System.Exception exception) {
            exception = null;
            obj = default(ProductInfoAsiiu_v2);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out ProductInfoAsiiu_v2 obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static ProductInfoAsiiu_v2 LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.4.0.22414")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://fsrar.ru/WEGAIS/ProductRef_v2")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://fsrar.ru/WEGAIS/ProductRef_v2", IsNullable=true)]
    [System.Runtime.Serialization.DataContractAttribute(Name="InformF1Type", Namespace="http://fsrar.ru/WEGAIS/ProductRef_v2")]
    public partial class InformF1Type : System.ComponentModel.INotifyPropertyChanged {
        
        private string regIdField;
        
        private MarkInfoType markInfoField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        public InformF1Type() {
            this.markInfoField = new MarkInfoType();
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string RegId {
            get {
                return this.regIdField;
            }
            set {
                if ((this.regIdField != null)) {
                    if ((regIdField.Equals(value) != true)) {
                        this.regIdField = value;
                        this.OnPropertyChanged("RegId");
                    }
                }
                else {
                    this.regIdField = value;
                    this.OnPropertyChanged("RegId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MarkInfoType MarkInfo {
            get {
                return this.markInfoField;
            }
            set {
                if ((this.markInfoField != null)) {
                    if ((markInfoField.Equals(value) != true)) {
                        this.markInfoField = value;
                        this.OnPropertyChanged("MarkInfo");
                    }
                }
                else {
                    this.markInfoField = value;
                    this.OnPropertyChanged("MarkInfo");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(InformF1Type));
                }
                return serializer;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current InformF1Type object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an InformF1Type object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output InformF1Type object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out InformF1Type obj, out System.Exception exception) {
            exception = null;
            obj = default(InformF1Type);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out InformF1Type obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static InformF1Type Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((InformF1Type)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current InformF1Type object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an InformF1Type object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output InformF1Type object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out InformF1Type obj, out System.Exception exception) {
            exception = null;
            obj = default(InformF1Type);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out InformF1Type obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static InformF1Type LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.4.0.22414")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://fsrar.ru/WEGAIS/ProductRef_v2")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://fsrar.ru/WEGAIS/ProductRef_v2", IsNullable=true)]
    [System.Runtime.Serialization.DataContractAttribute(Name="InformF2Type", Namespace="http://fsrar.ru/WEGAIS/ProductRef_v2")]
    public partial class InformF2Type : System.ComponentModel.INotifyPropertyChanged {
        
        private InformF2TypeItem informF2ItemField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        public InformF2Type() {
            this.informF2ItemField = new InformF2TypeItem();
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public InformF2TypeItem InformF2Item {
            get {
                return this.informF2ItemField;
            }
            set {
                if ((this.informF2ItemField != null)) {
                    if ((informF2ItemField.Equals(value) != true)) {
                        this.informF2ItemField = value;
                        this.OnPropertyChanged("InformF2Item");
                    }
                }
                else {
                    this.informF2ItemField = value;
                    this.OnPropertyChanged("InformF2Item");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(InformF2Type));
                }
                return serializer;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current InformF2Type object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an InformF2Type object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output InformF2Type object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out InformF2Type obj, out System.Exception exception) {
            exception = null;
            obj = default(InformF2Type);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out InformF2Type obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static InformF2Type Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((InformF2Type)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current InformF2Type object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an InformF2Type object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output InformF2Type object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out InformF2Type obj, out System.Exception exception) {
            exception = null;
            obj = default(InformF2Type);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out InformF2Type obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static InformF2Type LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.4.0.22414")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://fsrar.ru/WEGAIS/ProductRef_v2")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://fsrar.ru/WEGAIS/ProductRef_v2", IsNullable=true)]
    [System.Runtime.Serialization.DataContractAttribute(Name="InformF2TypeItem", Namespace="http://fsrar.ru/WEGAIS/ProductRef_v2")]
    public partial class InformF2TypeItem : System.ComponentModel.INotifyPropertyChanged {
        
        private string f2RegIdField;
        
        private MarkInfoType markInfoField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        public InformF2TypeItem() {
            this.markInfoField = new MarkInfoType();
            this.f2RegIdField = "FIRSTSHIPMENT";
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string F2RegId {
            get {
                return this.f2RegIdField;
            }
            set {
                if ((this.f2RegIdField != null)) {
                    if ((f2RegIdField.Equals(value) != true)) {
                        this.f2RegIdField = value;
                        this.OnPropertyChanged("F2RegId");
                    }
                }
                else {
                    this.f2RegIdField = value;
                    this.OnPropertyChanged("F2RegId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MarkInfoType MarkInfo {
            get {
                return this.markInfoField;
            }
            set {
                if ((this.markInfoField != null)) {
                    if ((markInfoField.Equals(value) != true)) {
                        this.markInfoField = value;
                        this.OnPropertyChanged("MarkInfo");
                    }
                }
                else {
                    this.markInfoField = value;
                    this.OnPropertyChanged("MarkInfo");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(InformF2TypeItem));
                }
                return serializer;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current InformF2TypeItem object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an InformF2TypeItem object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output InformF2TypeItem object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out InformF2TypeItem obj, out System.Exception exception) {
            exception = null;
            obj = default(InformF2TypeItem);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out InformF2TypeItem obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static InformF2TypeItem Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((InformF2TypeItem)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current InformF2TypeItem object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an InformF2TypeItem object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output InformF2TypeItem object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out InformF2TypeItem obj, out System.Exception exception) {
            exception = null;
            obj = default(InformF2TypeItem);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out InformF2TypeItem obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static InformF2TypeItem LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
}
