// ------------------------------------------------------------------------------
//  <auto-generated>
//    Generated by Xsd2Code. Version 3.4.0.22408 Microsoft Reciprocal License (Ms-RL) 
//    <NameSpace>Egais.Entities.RequestAddProducts</NameSpace><Collection>List</Collection><codeType>CSharp</codeType><EnableDataBinding>True</EnableDataBinding><EnableLazyLoading>False</EnableLazyLoading><TrackingChangesEnable>False</TrackingChangesEnable><GenTrackingClasses>False</GenTrackingClasses><HidePrivateFieldInIDE>False</HidePrivateFieldInIDE><EnableSummaryComment>False</EnableSummaryComment><VirtualProp>False</VirtualProp><IncludeSerializeMethod>True</IncludeSerializeMethod><UseBaseClass>False</UseBaseClass><GenBaseClass>False</GenBaseClass><GenerateCloneMethod>False</GenerateCloneMethod><GenerateDataContracts>True</GenerateDataContracts><CodeBaseTag>Net35</CodeBaseTag><SerializeMethodName>Serialize</SerializeMethodName><DeserializeMethodName>Deserialize</DeserializeMethodName><SaveToFileMethodName>SaveToFile</SaveToFileMethodName><LoadFromFileMethodName>LoadFromFile</LoadFromFileMethodName><GenerateXMLAttributes>True</GenerateXMLAttributes><OrderXMLAttrib>False</OrderXMLAttrib><EnableEncoding>False</EnableEncoding><AutomaticProperties>False</AutomaticProperties><GenerateShouldSerialize>False</GenerateShouldSerialize><DisableDebug>False</DisableDebug><PropNameSpecified>Default</PropNameSpecified><Encoder>UTF8</Encoder><CustomUsings></CustomUsings><ExcludeIncludedTypes>True</ExcludeIncludedTypes><EnableInitializeFields>True</EnableInitializeFields>
//  </auto-generated>
// ------------------------------------------------------------------------------
namespace Egais.Entities.RequestAddProducts {
    using System;
    using System.Diagnostics;
    using System.Xml.Serialization;
    using System.Collections;
    using System.Xml.Schema;
    using System.ComponentModel;
    using System.IO;
    using System.Text;
    using System.Collections.Generic;
    using System.Runtime.Serialization;

    using Egais.Entities.EGCommon;
    using Egais.Entities.EGCommonEnum;
    using Egais.Entities.ProductRef_v2;
    

    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.4.0.22414")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://fsrar.ru/WEGAIS/RequestAddProducts")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://fsrar.ru/WEGAIS/RequestAddProducts", IsNullable=true)]
    [System.Runtime.Serialization.DataContractAttribute(Name="RequestAddProducts", Namespace="http://fsrar.ru/WEGAIS/RequestAddProducts")]
    public partial class RequestAddProducts : System.ComponentModel.INotifyPropertyChanged {
        
        private string clientIdField;
        
        private string requestNumberField;
        
        private System.DateTime requestDateField;
        
        private RequestAddSSPPositionType contentField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        public RequestAddProducts() {
            this.contentField = new RequestAddSSPPositionType();
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ClientId {
            get {
                return this.clientIdField;
            }
            set {
                if ((this.clientIdField != null)) {
                    if ((clientIdField.Equals(value) != true)) {
                        this.clientIdField = value;
                        this.OnPropertyChanged("ClientId");
                    }
                }
                else {
                    this.clientIdField = value;
                    this.OnPropertyChanged("ClientId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string RequestNumber {
            get {
                return this.requestNumberField;
            }
            set {
                if ((this.requestNumberField != null)) {
                    if ((requestNumberField.Equals(value) != true)) {
                        this.requestNumberField = value;
                        this.OnPropertyChanged("RequestNumber");
                    }
                }
                else {
                    this.requestNumberField = value;
                    this.OnPropertyChanged("RequestNumber");
                }
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(DataType="date")]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime RequestDate {
            get {
                return this.requestDateField;
            }
            set {
                if ((requestDateField.Equals(value) != true)) {
                    this.requestDateField = value;
                    this.OnPropertyChanged("RequestDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public RequestAddSSPPositionType Content {
            get {
                return this.contentField;
            }
            set {
                if ((this.contentField != null)) {
                    if ((contentField.Equals(value) != true)) {
                        this.contentField = value;
                        this.OnPropertyChanged("Content");
                    }
                }
                else {
                    this.contentField = value;
                    this.OnPropertyChanged("Content");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(RequestAddProducts));
                }
                return serializer;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current RequestAddProducts object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an RequestAddProducts object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output RequestAddProducts object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out RequestAddProducts obj, out System.Exception exception) {
            exception = null;
            obj = default(RequestAddProducts);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out RequestAddProducts obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static RequestAddProducts Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((RequestAddProducts)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current RequestAddProducts object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an RequestAddProducts object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output RequestAddProducts object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out RequestAddProducts obj, out System.Exception exception) {
            exception = null;
            obj = default(RequestAddProducts);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out RequestAddProducts obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static RequestAddProducts LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.4.0.22414")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://fsrar.ru/WEGAIS/RequestAddProducts")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://fsrar.ru/WEGAIS/RequestAddProducts", IsNullable=true)]
    [System.Runtime.Serialization.DataContractAttribute(Name="RequestAddSSPPositionType", Namespace="http://fsrar.ru/WEGAIS/RequestAddProducts")]
    public partial class RequestAddSSPPositionType : System.ComponentModel.INotifyPropertyChanged {
        
        private string producerField;
        
        private ProductType typeField;
        
        private string vidCodeField;
        
        private string countryCodeField;
        
        private string fullNameField;
        
        private string shortNameField;
        
        private UnpackedType unpacked_FlagField;
        
        private decimal capacityField;
        
        private bool capacityFieldSpecified;
        
        private decimal pERCENT_ALCField;
        
        private decimal pERCENT_ALC_minField;
        
        private bool pERCENT_ALC_minFieldSpecified;
        
        private decimal pERCENT_ALC_maxField;
        
        private bool pERCENT_ALC_maxFieldSpecified;
        
        private string fRAPIDField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Producer {
            get {
                return this.producerField;
            }
            set {
                if ((this.producerField != null)) {
                    if ((producerField.Equals(value) != true)) {
                        this.producerField = value;
                        this.OnPropertyChanged("Producer");
                    }
                }
                else {
                    this.producerField = value;
                    this.OnPropertyChanged("Producer");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ProductType Type {
            get {
                return this.typeField;
            }
            set {
                if ((typeField.Equals(value) != true)) {
                    this.typeField = value;
                    this.OnPropertyChanged("Type");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string VidCode {
            get {
                return this.vidCodeField;
            }
            set {
                if ((this.vidCodeField != null)) {
                    if ((vidCodeField.Equals(value) != true)) {
                        this.vidCodeField = value;
                        this.OnPropertyChanged("VidCode");
                    }
                }
                else {
                    this.vidCodeField = value;
                    this.OnPropertyChanged("VidCode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CountryCode {
            get {
                return this.countryCodeField;
            }
            set {
                if ((this.countryCodeField != null)) {
                    if ((countryCodeField.Equals(value) != true)) {
                        this.countryCodeField = value;
                        this.OnPropertyChanged("CountryCode");
                    }
                }
                else {
                    this.countryCodeField = value;
                    this.OnPropertyChanged("CountryCode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FullName {
            get {
                return this.fullNameField;
            }
            set {
                if ((this.fullNameField != null)) {
                    if ((fullNameField.Equals(value) != true)) {
                        this.fullNameField = value;
                        this.OnPropertyChanged("FullName");
                    }
                }
                else {
                    this.fullNameField = value;
                    this.OnPropertyChanged("FullName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ShortName {
            get {
                return this.shortNameField;
            }
            set {
                if ((this.shortNameField != null)) {
                    if ((shortNameField.Equals(value) != true)) {
                        this.shortNameField = value;
                        this.OnPropertyChanged("ShortName");
                    }
                }
                else {
                    this.shortNameField = value;
                    this.OnPropertyChanged("ShortName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public UnpackedType Unpacked_Flag {
            get {
                return this.unpacked_FlagField;
            }
            set {
                if ((unpacked_FlagField.Equals(value) != true)) {
                    this.unpacked_FlagField = value;
                    this.OnPropertyChanged("Unpacked_Flag");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal Capacity {
            get {
                return this.capacityField;
            }
            set {
                if ((this.capacityField != null)) {
                    if ((capacityField.Equals(value) != true)) {
                        this.capacityField = value;
                        this.OnPropertyChanged("Capacity");
                    }
                }
                else {
                    this.capacityField = value;
                    this.OnPropertyChanged("Capacity");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool CapacitySpecified {
            get {
                return this.capacityFieldSpecified;
            }
            set {
                if ((capacityFieldSpecified.Equals(value) != true)) {
                    this.capacityFieldSpecified = value;
                    this.OnPropertyChanged("CapacitySpecified");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal PERCENT_ALC {
            get {
                return this.pERCENT_ALCField;
            }
            set {
                if ((this.pERCENT_ALCField != null)) {
                    if ((pERCENT_ALCField.Equals(value) != true)) {
                        this.pERCENT_ALCField = value;
                        this.OnPropertyChanged("PERCENT_ALC");
                    }
                }
                else {
                    this.pERCENT_ALCField = value;
                    this.OnPropertyChanged("PERCENT_ALC");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal PERCENT_ALC_min {
            get {
                return this.pERCENT_ALC_minField;
            }
            set {
                if ((this.pERCENT_ALC_minField != null)) {
                    if ((pERCENT_ALC_minField.Equals(value) != true)) {
                        this.pERCENT_ALC_minField = value;
                        this.OnPropertyChanged("PERCENT_ALC_min");
                    }
                }
                else {
                    this.pERCENT_ALC_minField = value;
                    this.OnPropertyChanged("PERCENT_ALC_min");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool PERCENT_ALC_minSpecified {
            get {
                return this.pERCENT_ALC_minFieldSpecified;
            }
            set {
                if ((pERCENT_ALC_minFieldSpecified.Equals(value) != true)) {
                    this.pERCENT_ALC_minFieldSpecified = value;
                    this.OnPropertyChanged("PERCENT_ALC_minSpecified");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal PERCENT_ALC_max {
            get {
                return this.pERCENT_ALC_maxField;
            }
            set {
                if ((this.pERCENT_ALC_maxField != null)) {
                    if ((pERCENT_ALC_maxField.Equals(value) != true)) {
                        this.pERCENT_ALC_maxField = value;
                        this.OnPropertyChanged("PERCENT_ALC_max");
                    }
                }
                else {
                    this.pERCENT_ALC_maxField = value;
                    this.OnPropertyChanged("PERCENT_ALC_max");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool PERCENT_ALC_maxSpecified {
            get {
                return this.pERCENT_ALC_maxFieldSpecified;
            }
            set {
                if ((pERCENT_ALC_maxFieldSpecified.Equals(value) != true)) {
                    this.pERCENT_ALC_maxFieldSpecified = value;
                    this.OnPropertyChanged("PERCENT_ALC_maxSpecified");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FRAPID {
            get {
                return this.fRAPIDField;
            }
            set {
                if ((this.fRAPIDField != null)) {
                    if ((fRAPIDField.Equals(value) != true)) {
                        this.fRAPIDField = value;
                        this.OnPropertyChanged("FRAPID");
                    }
                }
                else {
                    this.fRAPIDField = value;
                    this.OnPropertyChanged("FRAPID");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(RequestAddSSPPositionType));
                }
                return serializer;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current RequestAddSSPPositionType object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an RequestAddSSPPositionType object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output RequestAddSSPPositionType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out RequestAddSSPPositionType obj, out System.Exception exception) {
            exception = null;
            obj = default(RequestAddSSPPositionType);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out RequestAddSSPPositionType obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static RequestAddSSPPositionType Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((RequestAddSSPPositionType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current RequestAddSSPPositionType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an RequestAddSSPPositionType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output RequestAddSSPPositionType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out RequestAddSSPPositionType obj, out System.Exception exception) {
            exception = null;
            obj = default(RequestAddSSPPositionType);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out RequestAddSSPPositionType obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static RequestAddSSPPositionType LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.4.0.22414")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://fsrar.ru/WEGAIS/RequestAddProducts")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://fsrar.ru/WEGAIS/RequestAddProducts", IsNullable=false)]
    public enum UnpackedType {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0")]
        Item0,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1")]
        Item1,
    }
}
